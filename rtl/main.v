`timescale	1ps / 1ps
////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./main.v
// {{{
// Project:	10Gb Ethernet switch
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	autofpga -I .: -d -o . allclocks.txt global.txt wbdown.txt icape.txt version.txt gpio.txt spio.txt wbuconsole.txt zipmaster.txt smiconsole.txt bkram.txt flash.txt sdio.txt smiscope.txt flashscope.txt fanscope.txt cfgscope.txt sdioscope.txt mem_bkram_only.txt mem_flash_bkram.txt i2ccpu.txt fan.txt sirefclk.txt i2cscope.txt netled.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
// }}}
// Copyright (C) 2023, Gisselquist Technology, LLC
// {{{
// This file is part of the ETH10G project.
//
// The ETH10G project contains free software and gateware, licensed under the
// Apache License, Version 2.0 (the "License").  You may not use this project,
// or this file, except in compliance with the License.  You may obtain a copy
// of the License at
// }}}
//	http://www.apache.org/licenses/LICENSE-2.0
// {{{
// Unless required by applicable law or agreed to in writing, files
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
// License for the specific language governing permissions and limitations
// under the License.
//
////////////////////////////////////////////////////////////////////////////////
//
// }}}
`default_nettype	none
////////////////////////////////////////////////////////////////////////////////
//
// Macro defines
// {{{
//
//
// Here is a list of defines which may be used, post auto-design
// (not post-build), to turn particular peripherals (and bus masters)
// on and off.  In particular, to turn off support for a particular
// design component, just comment out its respective `define below.
//
// These lines are taken from the respective @ACCESS tags for each of our
// components.  If a component doesn't have an @ACCESS tag, it will not
// be listed here.
//
// First, the independent access fields for any bus masters
`define	NETLED_ACCESS
`define	WBUBUS_MASTER
`define	SMI_CONSOLE
// And then for the independent peripherals
`define	I2CSCOPE_SCOPC
`define	SIREFCLK_ACCESS
`define	SMISCOPE_SCOPC
`define	SPIO_ACCESS
`define	GPIO_ACCESS
`define	CFG_ACCESS
`define	VERSION_ACCESS
`define	INCLUDE_ZIPCPU
`define	FANSCOPE_SCOPC
`define	SDIO_ACCESS
`define	FLASH_ACCESS
`define	I2CCPU_ACCESS
`define	FAN_ACCESS
`define	CFGSCOPE_SCOPE
`define	I2CDMA_ACCESS
`define	BKRAM_ACCESS
`define	BUSCONSOLE_ACCESS
`define	SDIOSCOPE_SCOPC
//
//
// The list of those things that have @DEPENDS tags
//
//
//
// Dependencies
// Any core with both an @ACCESS and a @DEPENDS tag will show up here.
// The @DEPENDS tag will turn into a series of ifdef's, with the @ACCESS
// being defined only if all of the ifdef's are true//
// Deplist for @$(PREFIX)=flashdbg
`ifdef	FLASH_ACCESS
`define	FLASHSCOPE_SCOPC
`endif	// FLASH_ACCESS
// Deplist for @$(PREFIX)=flashcfg
`ifdef	FLASH_ACCESS
`define	FLASHCFG_ACCESS
`endif	// FLASH_ACCESS
//
// End of dependency list
//
//
// }}}
////////////////////////////////////////////////////////////////////////////////
//
// Any include files
// {{{
// These are drawn from anything with a MAIN.INCLUDE definition.
`include "builddate.v"
`define INCLUDE_DMA_CONTROLLER
`define INCLUDE_ACCOUNTING_COUNTERS
// }}}
//
// Finally, we define our main module itself.  We start with the list of
// I/O ports, or wires, passed into (or out of) the main function.
//
// These fields are copied verbatim from the respective I/O port lists,
// from the fields given by @MAIN.PORTLIST
//
module	main(i_clk, i_reset,
	// {{{
		o_gnet_linkup, o_gnet_activity,
		// Clock generator ports
		o_sirefclk_word, o_sirefclk_ce,
		// SPIO interface
		i_sw, i_btn, o_led,
		// GPIO ports
		i_gpio, o_gpio,
		// UART/host to wishbone interface
		i_wbu_uart_rx, o_wbu_uart_tx,
		o_wbu_uart_cts_n,
		i_clk200,
		// Veri1ator only interface
		cpu_sim_cyc,
		cpu_sim_stb,
		cpu_sim_we,
		cpu_sim_addr,
		cpu_sim_data,
		cpu_sim_stall,
		cpu_sim_ack,
		cpu_sim_idata,
`ifdef	VERILATOR
		cpu_prof_stb,
		cpu_prof_addr,
		cpu_prof_ticks,
`endif
		i_cpu_reset,
		// SMI
		i_smi_oen, i_smi_wen, i_smi_sa,
		i_smi_sd, o_smi_sd, o_smi_oen,
		// SDIO SD Card
		o_sdcard_clk, i_sdcard_ds,
`ifdef	VERILATOR
		io_sdcard_cmd_tristate,
		o_sdcard_cmd, i_sdcard_cmd,
		io_sdcard_dat_tristate,
		o_sdcard_dat, i_sdcard_dat,
`else
		io_sdcard_cmd, io_sdcard_dat,
`endif
		i_sdcard_detect,
		// The Universal QSPI Flash
		o_flash_cs_n, o_flash_sck, o_flash_dat, i_flash_dat, o_flash_mod,
			i_i2c_sda, i_i2c_scl,
			o_i2c_sda, o_i2c_scl,
			i_fan_sda, i_fan_scl,
			o_fan_sda, o_fan_scl,
			o_fpga_pwm, o_sys_pwm, i_fan_tach
	// }}}
	);
////////////////////////////////////////////////////////////////////////////////
//
// Any parameter definitions
// {{{
// These are drawn from anything with a MAIN.PARAM definition.
// As they aren't connected to the toplevel at all, it would
// be best to use localparam over parameter, but here we don't
// check
	localparam	ICAPE_LGDIV=3;
	////////////////////////////////////////////////////////////////////////
	//
	// WBUBUS parameters
	// {{{
	// Baudrate :   1000000
	// Clock    : 100000000
	localparam [23:0] BUSUART = 24'h64;	//   1000000 baud
	localparam	DBGBUSBITS = $clog2(BUSUART);
	//
	// Maximum command is 6 bytes, where each byte takes 10 baud clocks
	// and each baud clock requires DBGBUSBITS to represent.  Here,
	// we'll add one more for good measure.
	localparam	DBGBUSWATCHDOG_RAW = DBGBUSBITS + 9;
	localparam	DBGBUSWATCHDOG = (DBGBUSWATCHDOG_RAW > 19)
				? DBGBUSWATCHDOG_RAW : 19;
	// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// Variables/definitions/parameters used by the ZipCPU bus master
	// {{{
	//
	// A 32-bit address indicating where the ZipCPU should start running
	// from
`ifdef	BKROM_ACCESS
	localparam	RESET_ADDRESS = @$(/bkrom.BASE);
`else
`ifdef	FLASH_ACCESS
	localparam	RESET_ADDRESS = 48234496;
`else
	localparam	RESET_ADDRESS = 16777216;
`endif	// FLASH_ACCESS
`endif	// BKROM_ACCESS
	//
	// The number of valid bits on the bus
	localparam	ZIP_ADDRESS_WIDTH = 20; // Zip-CPU address width
	//
	// Number of ZipCPU interrupts
	localparam	ZIP_INTS = 16;
	//
	// ZIP_START_HALTED
	//
	// A boolean, indicating whether or not the ZipCPU be halted on startup?
`ifdef	BKROM_ACCESS
	localparam	ZIP_START_HALTED=1'b0;
`else
	localparam	ZIP_START_HALTED=1'b1;
`endif
	// }}}
// }}}
////////////////////////////////////////////////////////////////////////////////
//
// Port declarations
// {{{
// The next step is to declare all of the various ports that were just
// listed above.  
//
// The following declarations are taken from the values of the various
// @MAIN.IODECL keys.
//
	input	wire		i_clk;
	// verilator lint_off UNUSED
	input	wire		i_reset;
	// verilator lint_on UNUSED
	output	wire	[3:0]	o_gnet_linkup, o_gnet_activity;
	output	wire	[7:0]	o_sirefclk_word;
	output	wire		o_sirefclk_ce;
	// SPIO interface
	input	wire	[8-1:0]	i_sw;
	input	wire	[5-1:0]	i_btn;
	output	wire	[8-1:0]	o_led;
	localparam	NGPI = 16, NGPO=8;
	// GPIO ports
	input		[(NGPI-1):0]	i_gpio;
	output	wire	[(NGPO-1):0]	o_gpio;
	input	wire		i_wbu_uart_rx;
	output	wire		o_wbu_uart_tx;
	// input wire		i_wbu_uart_rts_n; // FT*'s perspective
	output wire		o_wbu_uart_cts_n;
	input	wire		cpu_sim_cyc, cpu_sim_stb;
	input	wire		cpu_sim_we;
	input	wire	[6:0]	cpu_sim_addr;
	input	wire	[31:0]	cpu_sim_data;
	//
	output	wire		cpu_sim_stall, cpu_sim_ack;
	output	wire	[31:0]	cpu_sim_idata;
	//
`ifdef	VERILATOR
	output	wire		cpu_prof_stb;
	output	wire	[20+$clog2(512/8)-1:0]	cpu_prof_addr;
	output	wire [31:0]	cpu_prof_ticks;
`endif
	input	wire		i_cpu_reset;
	// SMI I/Os
	// {{{
	input	wire	i_smi_oen, i_smi_wen;
	input	wire	[5:0]	i_smi_sa;
	input wire	[17:0]	i_smi_sd;
	output wire	[17:0]	o_smi_sd;
	output wire		o_smi_oen;
	// }}}
	// SDIO SD Card declarations
	// {{{
	output	wire		o_sdcard_clk;
	input	wire		i_sdcard_ds;
`ifdef	VERILATOR
	output	wire		io_sdcard_cmd_tristate;
	output	wire		o_sdcard_cmd;
	input	wire		i_sdcard_cmd;
	output	wire	[4-1:0]	io_sdcard_dat_tristate;
	output	wire	[4-1:0]	o_sdcard_dat;
	input	wire	[4-1:0]	i_sdcard_dat;
`else
	inout	wire		io_sdcard_cmd;
	inout	wire	[4-1:0]	io_sdcard_dat;
`endif
	input	wire		i_sdcard_detect;
	// }}}
	// The Universal QSPI flash
	output	wire		o_flash_cs_n, o_flash_sck;
	output	wire	[3:0]	o_flash_dat;
	input	wire	[3:0]	i_flash_dat;
	output	wire	[1:0]	o_flash_mod;
	// I2C Port declarations
	// {{{
	input	wire	i_i2c_sda, i_i2c_scl;
	output	wire	o_i2c_sda, o_i2c_scl;
	// }}}
	// FAN Port declarations
	// {{{
	input	wire	i_fan_sda, i_fan_scl;
	output	wire	o_fan_sda, o_fan_scl;
	output	wire	o_fpga_pwm, o_sys_pwm;
	input	wire	i_fan_tach;
	// }}}
// }}}
	// Make Verilator happy
	// {{{
	// Defining bus wires for lots of components often ends up with unused
	// wires lying around.  We'll turn off Ver1lator's lint warning
	// here that checks for unused wires.
	// }}}
	// verilator lint_off UNUSED
	////////////////////////////////////////////////////////////////////////
	//
	// Declaring interrupt lines
	// {{{
	// These declarations come from the various components values
	// given under the @INT.<interrupt name>.WIRE key.
	//
	wire	i2cscope_int;	// i2cscope.INT.I2CSCOPE.WIRE
	wire	scope_smi_int;	// scope_smi.INT.SMISCOPE.WIRE
	wire	spio_int;	// spio.INT.SPIO.WIRE
	wire	gpio_int;	// gpio.INT.GPIO.WIRE
	wire	fanscope_int;	// fanscope.INT.FANSCOPE.WIRE
	wire	sdcard_int;	// sdcard.INT.SDCARD.WIRE
	wire	uartrxf_int;	// uart.INT.UARTRXF.WIRE
	wire	uarttx_int;	// uart.INT.UARTTX.WIRE
	wire	uarttxf_int;	// uart.INT.UARTTXF.WIRE
	wire	uartrx_int;	// uart.INT.UARTRX.WIRE
	wire	flashdbg_int;	// flashdbg.INT.FLASHDBG.WIRE
	wire	sdioscope_int;	// sdioscope.INT.SDIOSCOPE.WIRE
	// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// Component declarations
	// {{{
	// These declarations come from the @MAIN.DEFNS keys found in the
	// various components comprising the design.
	//
	reg		r_sirefclk_en;
	reg	[29:0]	r_sirefclk_data;
	wire		w_sirefclk_unused_stb;
	reg		r_sirefclk_ack;
	wire	[8-1:0]	w_led;
	// Verilator lint_off	UNUSED
	wire	[31:0]	cfg_debug;
	// Verilator lint_on 	UNUSED
	////////////////////////////////////////////////////////////////////////
	//
	// WBUBUS: USB-UART interface declarations
	// {{{
	//
	wire	[7:0]	wbu_rx_data, wbu_tx_data;
	wire		wbu_rx_stb;
	wire		wbu_tx_stb, wbu_tx_busy;

	// Definitions for the WB-UART converter.  We really only need one
	// (more) non-bus wire--one to use to select if we are interacting
	// with the ZipCPU or not.
	// Verilator lint_off UNUSED
	wire	[0:0]	wbubus_dbg;
	// Verilator lint_on  UNUSED
	// }}}
	// Verilator lint_off UNUSED
	input	wire	i_clk200;
	// Verilator lint_on  UNUSED
	////////////////////////////////////////////////////////////////////////
	//
	// ZipSystem/ZipCPU connection definitions
	// {{{
`ifndef	VERILATOR
	wire		cpu_prof_stb;
	wire	[20+$clog2(512/8)-1:0]	cpu_prof_addr;
	wire [31:0]	cpu_prof_ticks;
`endif
	// All we define here is a set of scope wires
	// Verilator lint_off UNUSED
	wire		raw_cpu_dbg_stall, raw_cpu_dbg_ack;
	wire	[31:0]	zip_debug;
	wire		zip_trigger;
	// Verilator lint_on  UNUSED
	wire	[ZIP_INTS-1:0] zip_int_vector;
	wire		zip_cpu_int;
	// }}}
	// SMI BUS/Console definition
	// {{{
	wire		smi_console_valid, smi_console_ready;
	// Verilator lint_off UNUSED
	wire	[7:0]	smi_console_data;

	wire		ign_smi_ready;
	wire	[31:0]	smi_debug;
	// Verilator lint_on  UNUSED
	// }}}
// BUILDTIME doesnt need to include builddate.v a second time
// `include "builddate.v"
	// SDIO SD Card definitions
	// Verilator lint_off UNUSED
	wire	[31:0]	sdcard_debug;
	// Verilator lint_on  UNUSED
	// Definitions for the flash debug port
	// Verilator lint_off UNUSED
	wire		flash_dbg_trigger;
	wire	[31:0]	flash_debug;
	// Verilator lint_on  UNUSED
	// I2C Controller
	// {{{
	// Verilator lint_off UNUSED
	localparam	I2C_ID_WIDTH=(2 == 0) ? 1 : 2;

	wire		i2c_valid, i2c_ready, i2c_last;
	wire	[7:0]	i2c_data;
	wire	[I2C_ID_WIDTH-1:0]	i2c_id;

	wire	[31:0]	i2c_debug;
	// Verilator lint_on  UNUSED
	// }}}
	// FAN/fan Controller
	// {{{
	// Verilator lint_off UNUSED
	wire	[31:0]	fan_debug;
	// Verilator lint_on  UNUSED
	// }}}
	// Remove this scope tag via inheritance when/if you connect the
	// scope interrupt
	//
	// Verilator lint_off UNUSED
	wire	cfgscope_int;
	// Verilator lint_on  UNUSED
	wire	i2cdma_ready;
	////////////////////////////////////////////////////////////////////////
	//
	// WBUBUS: Console definitions
	// {{{
	wire		w_console_rx_stb, w_console_tx_stb, w_console_busy;
	wire	[6:0]	w_console_rx_data, w_console_tx_data;
	// Verilator lint_off UNUSED
	wire	[31:0]	uart_debug;
	// Verilator lint_on  UNUSED
	// }}}

// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// Declaring interrupt vector wires
	// {{{
	// These declarations come from the various components having
	// PIC and PIC.MAX keys.
	//
	wire	[14:0]	sys_int_vector;
	wire	[14:0]	alt_int_vector;
	// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// Declare bus signals
	// {{{
	////////////////////////////////////////////////////////////////////////

	// Bus wbwide
	// {{{
	// Wishbone definitions for bus wbwide, component wbu_arbiter
	// Verilator lint_off UNUSED
	wire		wbwide_wbu_arbiter_cyc, wbwide_wbu_arbiter_stb, wbwide_wbu_arbiter_we;
	wire	[19:0]	wbwide_wbu_arbiter_addr;
	wire	[511:0]	wbwide_wbu_arbiter_data;
	wire	[63:0]	wbwide_wbu_arbiter_sel;
	wire		wbwide_wbu_arbiter_stall, wbwide_wbu_arbiter_ack, wbwide_wbu_arbiter_err;
	wire	[511:0]	wbwide_wbu_arbiter_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wbwide, component zip
	// Verilator lint_off UNUSED
	wire		wbwide_zip_cyc, wbwide_zip_stb, wbwide_zip_we;
	wire	[19:0]	wbwide_zip_addr;
	wire	[511:0]	wbwide_zip_data;
	wire	[63:0]	wbwide_zip_sel;
	wire		wbwide_zip_stall, wbwide_zip_ack, wbwide_zip_err;
	wire	[511:0]	wbwide_zip_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wbwide, component i2c
	// Verilator lint_off UNUSED
	wire		wbwide_i2cm_cyc, wbwide_i2cm_stb, wbwide_i2cm_we;
	wire	[19:0]	wbwide_i2cm_addr;
	wire	[511:0]	wbwide_i2cm_data;
	wire	[63:0]	wbwide_i2cm_sel;
	wire		wbwide_i2cm_stall, wbwide_i2cm_ack, wbwide_i2cm_err;
	wire	[511:0]	wbwide_i2cm_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wbwide, component i2cdma
	// Verilator lint_off UNUSED
	wire		wbwide_i2cdma_cyc, wbwide_i2cdma_stb, wbwide_i2cdma_we;
	wire	[19:0]	wbwide_i2cdma_addr;
	wire	[511:0]	wbwide_i2cdma_data;
	wire	[63:0]	wbwide_i2cdma_sel;
	wire		wbwide_i2cdma_stall, wbwide_i2cdma_ack, wbwide_i2cdma_err;
	wire	[511:0]	wbwide_i2cdma_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wbwide, component wbdown
	// Verilator lint_off UNUSED
	wire		wbwide_wbdown_cyc, wbwide_wbdown_stb, wbwide_wbdown_we;
	wire	[19:0]	wbwide_wbdown_addr;
	wire	[511:0]	wbwide_wbdown_data;
	wire	[63:0]	wbwide_wbdown_sel;
	wire		wbwide_wbdown_stall, wbwide_wbdown_ack, wbwide_wbdown_err;
	wire	[511:0]	wbwide_wbdown_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wbwide, component bkram
	// Verilator lint_off UNUSED
	wire		wbwide_bkram_cyc, wbwide_bkram_stb, wbwide_bkram_we;
	wire	[19:0]	wbwide_bkram_addr;
	wire	[511:0]	wbwide_bkram_data;
	wire	[63:0]	wbwide_bkram_sel;
	wire		wbwide_bkram_stall, wbwide_bkram_ack, wbwide_bkram_err;
	wire	[511:0]	wbwide_bkram_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wbwide, component wbflashdn
	// Verilator lint_off UNUSED
	wire		wbwide_wbflashdn_cyc, wbwide_wbflashdn_stb, wbwide_wbflashdn_we;
	wire	[19:0]	wbwide_wbflashdn_addr;
	wire	[511:0]	wbwide_wbflashdn_data;
	wire	[63:0]	wbwide_wbflashdn_sel;
	wire		wbwide_wbflashdn_stall, wbwide_wbflashdn_ack, wbwide_wbflashdn_err;
	wire	[511:0]	wbwide_wbflashdn_idata;
	// Verilator lint_on UNUSED
	// }}}
	// Bus wb32
	// {{{
	// Wishbone definitions for bus wb32, component wbdown
	// Verilator lint_off UNUSED
	wire		wb32_wbdown_cyc, wb32_wbdown_stb, wb32_wbdown_we;
	wire	[7:0]	wb32_wbdown_addr;
	wire	[31:0]	wb32_wbdown_data;
	wire	[3:0]	wb32_wbdown_sel;
	wire		wb32_wbdown_stall, wb32_wbdown_ack, wb32_wbdown_err;
	wire	[31:0]	wb32_wbdown_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb32(SIO), component buildtime
	// Verilator lint_off UNUSED
	wire		wb32_buildtime_cyc, wb32_buildtime_stb, wb32_buildtime_we;
	wire	[7:0]	wb32_buildtime_addr;
	wire	[31:0]	wb32_buildtime_data;
	wire	[3:0]	wb32_buildtime_sel;
	wire		wb32_buildtime_stall, wb32_buildtime_ack, wb32_buildtime_err;
	wire	[31:0]	wb32_buildtime_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb32(SIO), component gpio
	// Verilator lint_off UNUSED
	wire		wb32_gpio_cyc, wb32_gpio_stb, wb32_gpio_we;
	wire	[7:0]	wb32_gpio_addr;
	wire	[31:0]	wb32_gpio_data;
	wire	[3:0]	wb32_gpio_sel;
	wire		wb32_gpio_stall, wb32_gpio_ack, wb32_gpio_err;
	wire	[31:0]	wb32_gpio_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb32(SIO), component sirefclk
	// Verilator lint_off UNUSED
	wire		wb32_sirefclk_cyc, wb32_sirefclk_stb, wb32_sirefclk_we;
	wire	[7:0]	wb32_sirefclk_addr;
	wire	[31:0]	wb32_sirefclk_data;
	wire	[3:0]	wb32_sirefclk_sel;
	wire		wb32_sirefclk_stall, wb32_sirefclk_ack, wb32_sirefclk_err;
	wire	[31:0]	wb32_sirefclk_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb32(SIO), component spio
	// Verilator lint_off UNUSED
	wire		wb32_spio_cyc, wb32_spio_stb, wb32_spio_we;
	wire	[7:0]	wb32_spio_addr;
	wire	[31:0]	wb32_spio_data;
	wire	[3:0]	wb32_spio_sel;
	wire		wb32_spio_stall, wb32_spio_ack, wb32_spio_err;
	wire	[31:0]	wb32_spio_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb32(SIO), component version
	// Verilator lint_off UNUSED
	wire		wb32_version_cyc, wb32_version_stb, wb32_version_we;
	wire	[7:0]	wb32_version_addr;
	wire	[31:0]	wb32_version_data;
	wire	[3:0]	wb32_version_sel;
	wire		wb32_version_stall, wb32_version_ack, wb32_version_err;
	wire	[31:0]	wb32_version_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb32, component flashcfg
	// Verilator lint_off UNUSED
	wire		wb32_flashcfg_cyc, wb32_flashcfg_stb, wb32_flashcfg_we;
	wire	[7:0]	wb32_flashcfg_addr;
	wire	[31:0]	wb32_flashcfg_data;
	wire	[3:0]	wb32_flashcfg_sel;
	wire		wb32_flashcfg_stall, wb32_flashcfg_ack, wb32_flashcfg_err;
	wire	[31:0]	wb32_flashcfg_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb32, component cfgscope
	// Verilator lint_off UNUSED
	wire		wb32_cfgscope_cyc, wb32_cfgscope_stb, wb32_cfgscope_we;
	wire	[7:0]	wb32_cfgscope_addr;
	wire	[31:0]	wb32_cfgscope_data;
	wire	[3:0]	wb32_cfgscope_sel;
	wire		wb32_cfgscope_stall, wb32_cfgscope_ack, wb32_cfgscope_err;
	wire	[31:0]	wb32_cfgscope_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb32, component fanscope
	// Verilator lint_off UNUSED
	wire		wb32_fanscope_cyc, wb32_fanscope_stb, wb32_fanscope_we;
	wire	[7:0]	wb32_fanscope_addr;
	wire	[31:0]	wb32_fanscope_data;
	wire	[3:0]	wb32_fanscope_sel;
	wire		wb32_fanscope_stall, wb32_fanscope_ack, wb32_fanscope_err;
	wire	[31:0]	wb32_fanscope_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb32, component flashdbg
	// Verilator lint_off UNUSED
	wire		wb32_flashdbg_cyc, wb32_flashdbg_stb, wb32_flashdbg_we;
	wire	[7:0]	wb32_flashdbg_addr;
	wire	[31:0]	wb32_flashdbg_data;
	wire	[3:0]	wb32_flashdbg_sel;
	wire		wb32_flashdbg_stall, wb32_flashdbg_ack, wb32_flashdbg_err;
	wire	[31:0]	wb32_flashdbg_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb32, component i2cscope
	// Verilator lint_off UNUSED
	wire		wb32_i2cscope_cyc, wb32_i2cscope_stb, wb32_i2cscope_we;
	wire	[7:0]	wb32_i2cscope_addr;
	wire	[31:0]	wb32_i2cscope_data;
	wire	[3:0]	wb32_i2cscope_sel;
	wire		wb32_i2cscope_stall, wb32_i2cscope_ack, wb32_i2cscope_err;
	wire	[31:0]	wb32_i2cscope_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb32, component scope_smi
	// Verilator lint_off UNUSED
	wire		wb32_scope_smi_cyc, wb32_scope_smi_stb, wb32_scope_smi_we;
	wire	[7:0]	wb32_scope_smi_addr;
	wire	[31:0]	wb32_scope_smi_data;
	wire	[3:0]	wb32_scope_smi_sel;
	wire		wb32_scope_smi_stall, wb32_scope_smi_ack, wb32_scope_smi_err;
	wire	[31:0]	wb32_scope_smi_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb32, component sdioscope
	// Verilator lint_off UNUSED
	wire		wb32_sdioscope_cyc, wb32_sdioscope_stb, wb32_sdioscope_we;
	wire	[7:0]	wb32_sdioscope_addr;
	wire	[31:0]	wb32_sdioscope_data;
	wire	[3:0]	wb32_sdioscope_sel;
	wire		wb32_sdioscope_stall, wb32_sdioscope_ack, wb32_sdioscope_err;
	wire	[31:0]	wb32_sdioscope_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb32, component i2c
	// Verilator lint_off UNUSED
	wire		wb32_i2cs_cyc, wb32_i2cs_stb, wb32_i2cs_we;
	wire	[7:0]	wb32_i2cs_addr;
	wire	[31:0]	wb32_i2cs_data;
	wire	[3:0]	wb32_i2cs_sel;
	wire		wb32_i2cs_stall, wb32_i2cs_ack, wb32_i2cs_err;
	wire	[31:0]	wb32_i2cs_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb32, component i2cdma
	// Verilator lint_off UNUSED
	wire		wb32_i2cdma_cyc, wb32_i2cdma_stb, wb32_i2cdma_we;
	wire	[7:0]	wb32_i2cdma_addr;
	wire	[31:0]	wb32_i2cdma_data;
	wire	[3:0]	wb32_i2cdma_sel;
	wire		wb32_i2cdma_stall, wb32_i2cdma_ack, wb32_i2cdma_err;
	wire	[31:0]	wb32_i2cdma_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb32, component uart
	// Verilator lint_off UNUSED
	wire		wb32_uart_cyc, wb32_uart_stb, wb32_uart_we;
	wire	[7:0]	wb32_uart_addr;
	wire	[31:0]	wb32_uart_data;
	wire	[3:0]	wb32_uart_sel;
	wire		wb32_uart_stall, wb32_uart_ack, wb32_uart_err;
	wire	[31:0]	wb32_uart_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb32, component fan
	// Verilator lint_off UNUSED
	wire		wb32_fan_cyc, wb32_fan_stb, wb32_fan_we;
	wire	[7:0]	wb32_fan_addr;
	wire	[31:0]	wb32_fan_data;
	wire	[3:0]	wb32_fan_sel;
	wire		wb32_fan_stall, wb32_fan_ack, wb32_fan_err;
	wire	[31:0]	wb32_fan_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb32, component sdcard
	// Verilator lint_off UNUSED
	wire		wb32_sdcard_cyc, wb32_sdcard_stb, wb32_sdcard_we;
	wire	[7:0]	wb32_sdcard_addr;
	wire	[31:0]	wb32_sdcard_data;
	wire	[3:0]	wb32_sdcard_sel;
	wire		wb32_sdcard_stall, wb32_sdcard_ack, wb32_sdcard_err;
	wire	[31:0]	wb32_sdcard_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb32, component wb32_sio
	// Verilator lint_off UNUSED
	wire		wb32_sio_cyc, wb32_sio_stb, wb32_sio_we;
	wire	[7:0]	wb32_sio_addr;
	wire	[31:0]	wb32_sio_data;
	wire	[3:0]	wb32_sio_sel;
	wire		wb32_sio_stall, wb32_sio_ack, wb32_sio_err;
	wire	[31:0]	wb32_sio_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wb32, component cfg
	// Verilator lint_off UNUSED
	wire		wb32_cfg_cyc, wb32_cfg_stb, wb32_cfg_we;
	wire	[7:0]	wb32_cfg_addr;
	wire	[31:0]	wb32_cfg_data;
	wire	[3:0]	wb32_cfg_sel;
	wire		wb32_cfg_stall, wb32_cfg_ack, wb32_cfg_err;
	wire	[31:0]	wb32_cfg_idata;
	// Verilator lint_on UNUSED
	// }}}
	// Bus wbu
	// {{{
	// Wishbone definitions for bus wbu, component wbu
	// Verilator lint_off UNUSED
	wire		wbu_cyc, wbu_stb, wbu_we;
	wire	[24:0]	wbu_addr;
	wire	[31:0]	wbu_data;
	wire	[3:0]	wbu_sel;
	wire		wbu_stall, wbu_ack, wbu_err;
	wire	[31:0]	wbu_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wbu, component wbu_arbiter
	// Verilator lint_off UNUSED
	wire		wbu_wbu_arbiter_cyc, wbu_wbu_arbiter_stb, wbu_wbu_arbiter_we;
	wire	[24:0]	wbu_wbu_arbiter_addr;
	wire	[31:0]	wbu_wbu_arbiter_data;
	wire	[3:0]	wbu_wbu_arbiter_sel;
	wire		wbu_wbu_arbiter_stall, wbu_wbu_arbiter_ack, wbu_wbu_arbiter_err;
	wire	[31:0]	wbu_wbu_arbiter_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wbu, component zip
	// Verilator lint_off UNUSED
	wire		wbu_zip_cyc, wbu_zip_stb, wbu_zip_we;
	wire	[24:0]	wbu_zip_addr;
	wire	[31:0]	wbu_zip_data;
	wire	[3:0]	wbu_zip_sel;
	wire		wbu_zip_stall, wbu_zip_ack, wbu_zip_err;
	wire	[31:0]	wbu_zip_idata;
	// Verilator lint_on UNUSED
	// }}}
	// Bus wbflash
	// {{{
	// Wishbone definitions for bus wbflash, component wbflashdn
	// Verilator lint_off UNUSED
	wire		wbflash_wbflashdn_cyc, wbflash_wbflashdn_stb, wbflash_wbflashdn_we;
	wire	[22:0]	wbflash_wbflashdn_addr;
	wire	[31:0]	wbflash_wbflashdn_data;
	wire	[3:0]	wbflash_wbflashdn_sel;
	wire		wbflash_wbflashdn_stall, wbflash_wbflashdn_ack, wbflash_wbflashdn_err;
	wire	[31:0]	wbflash_wbflashdn_idata;
	// Verilator lint_on UNUSED
	// Wishbone definitions for bus wbflash, component flash
	// Verilator lint_off UNUSED
	wire		wbflash_flash_cyc, wbflash_flash_stb, wbflash_flash_we;
	wire	[22:0]	wbflash_flash_addr;
	wire	[31:0]	wbflash_flash_data;
	wire	[3:0]	wbflash_flash_sel;
	wire		wbflash_flash_stall, wbflash_flash_ack, wbflash_flash_err;
	wire	[31:0]	wbflash_flash_idata;
	// Verilator lint_on UNUSED
	// }}}
	// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// Peripheral address decoding, bus handling
	// {{{
	//
	// BUS-LOGIC for wbwide
	// {{{
	//
	// No class SINGLE peripherals on the "wbwide" bus
	//

	//
	// No class DOUBLE peripherals on the "wbwide" bus
	//

	// info: @ERROR.WIRE for wbdown matches the buses error name, wbwide_wbdown_err
	assign	wbwide_bkram_err= 1'b0;
	// info: @ERROR.WIRE for wbflashdn matches the buses error name, wbwide_wbflashdn_err
	//
	// Connect the wbwide bus components together using the wbxbar()
	//
	//
	wbxbar #(
		.NM(4), .NS(3), .AW(20), .DW(512),
		.SLAVE_ADDR({
			// Address width    = 20
			// Address LSBs     = 6
			// Slave name width = 9
			{ 20'h80000 }, // wbflashdn: 0x2000000
			{ 20'h40000 }, //     bkram: 0x1000000
			{ 20'h20000 }  //    wbdown: 0x0800000
		}),
		.SLAVE_MASK({
			// Address width    = 20
			// Address LSBs     = 6
			// Slave name width = 9
			{ 20'h80000 }, // wbflashdn
			{ 20'he0000 }, //     bkram
			{ 20'he0000 }  //    wbdown
		}),
		.OPT_DBLBUFFER(1'b1))
	wbwide_xbar(
		.i_clk(i_clk), .i_reset(i_reset),
		.i_mcyc({
			wbwide_i2cdma_cyc,
			wbwide_i2cm_cyc,
			wbwide_zip_cyc,
			wbwide_wbu_arbiter_cyc
		}),
		.i_mstb({
			wbwide_i2cdma_stb,
			wbwide_i2cm_stb,
			wbwide_zip_stb,
			wbwide_wbu_arbiter_stb
		}),
		.i_mwe({
			wbwide_i2cdma_we,
			wbwide_i2cm_we,
			wbwide_zip_we,
			wbwide_wbu_arbiter_we
		}),
		.i_maddr({
			wbwide_i2cdma_addr,
			wbwide_i2cm_addr,
			wbwide_zip_addr,
			wbwide_wbu_arbiter_addr
		}),
		.i_mdata({
			wbwide_i2cdma_data,
			wbwide_i2cm_data,
			wbwide_zip_data,
			wbwide_wbu_arbiter_data
		}),
		.i_msel({
			wbwide_i2cdma_sel,
			wbwide_i2cm_sel,
			wbwide_zip_sel,
			wbwide_wbu_arbiter_sel
		}),
		.o_mstall({
			wbwide_i2cdma_stall,
			wbwide_i2cm_stall,
			wbwide_zip_stall,
			wbwide_wbu_arbiter_stall
		}),
		.o_mack({
			wbwide_i2cdma_ack,
			wbwide_i2cm_ack,
			wbwide_zip_ack,
			wbwide_wbu_arbiter_ack
		}),
		.o_mdata({
			wbwide_i2cdma_idata,
			wbwide_i2cm_idata,
			wbwide_zip_idata,
			wbwide_wbu_arbiter_idata
		}),
		.o_merr({
			wbwide_i2cdma_err,
			wbwide_i2cm_err,
			wbwide_zip_err,
			wbwide_wbu_arbiter_err
		}),
		// Slave connections
		.o_scyc({
			wbwide_wbflashdn_cyc,
			wbwide_bkram_cyc,
			wbwide_wbdown_cyc
		}),
		.o_sstb({
			wbwide_wbflashdn_stb,
			wbwide_bkram_stb,
			wbwide_wbdown_stb
		}),
		.o_swe({
			wbwide_wbflashdn_we,
			wbwide_bkram_we,
			wbwide_wbdown_we
		}),
		.o_saddr({
			wbwide_wbflashdn_addr,
			wbwide_bkram_addr,
			wbwide_wbdown_addr
		}),
		.o_sdata({
			wbwide_wbflashdn_data,
			wbwide_bkram_data,
			wbwide_wbdown_data
		}),
		.o_ssel({
			wbwide_wbflashdn_sel,
			wbwide_bkram_sel,
			wbwide_wbdown_sel
		}),
		.i_sstall({
			wbwide_wbflashdn_stall,
			wbwide_bkram_stall,
			wbwide_wbdown_stall
		}),
		.i_sack({
			wbwide_wbflashdn_ack,
			wbwide_bkram_ack,
			wbwide_wbdown_ack
		}),
		.i_sdata({
			wbwide_wbflashdn_idata,
			wbwide_bkram_idata,
			wbwide_wbdown_idata
		}),
		.i_serr({
			wbwide_wbflashdn_err,
			wbwide_bkram_err,
			wbwide_wbdown_err
		})
		);

	// End of bus logic for wbwide
	// }}}
	//
	// BUS-LOGIC for wb32
	// {{{
	//
	// wb32 Bus logic to handle SINGLE slaves
	//
	reg		r_wb32_sio_ack;
	reg	[31:0]	r_wb32_sio_data;

	assign	wb32_sio_stall = 1'b0;

	initial r_wb32_sio_ack = 1'b0;
	always	@(posedge i_clk)
		r_wb32_sio_ack <= (wb32_sio_stb);
	assign	wb32_sio_ack = r_wb32_sio_ack;

	always	@(posedge i_clk)
	casez( wb32_sio_addr[2:0] )
	3'h0: r_wb32_sio_data <= wb32_buildtime_idata;
	3'h1: r_wb32_sio_data <= wb32_gpio_idata;
	3'h2: r_wb32_sio_data <= wb32_sirefclk_idata;
	3'h3: r_wb32_sio_data <= wb32_spio_idata;
	3'h4: r_wb32_sio_data <= wb32_version_idata;
	default: r_wb32_sio_data <= wb32_version_idata;
	endcase
	assign	wb32_sio_idata = r_wb32_sio_data;


	//
	// Now to translate this logic to the various SIO slaves
	//
	// In this case, the SIO bus has the prefix wb32_sio
	// and all of the slaves have various wires beginning
	// with their own respective bus prefixes.
	// Our goal here is to make certain that all of
	// the slave bus inputs match the SIO bus wires
	assign	wb32_buildtime_cyc = wb32_sio_cyc;
	assign	wb32_buildtime_stb = wb32_sio_stb && (wb32_sio_addr[ 2: 0] ==  3'h0);  // 0x00
	assign	wb32_buildtime_we  = wb32_sio_we;
	assign	wb32_buildtime_data= wb32_sio_data;
	assign	wb32_buildtime_sel = wb32_sio_sel;
	assign	wb32_gpio_cyc = wb32_sio_cyc;
	assign	wb32_gpio_stb = wb32_sio_stb && (wb32_sio_addr[ 2: 0] ==  3'h1);  // 0x04
	assign	wb32_gpio_we  = wb32_sio_we;
	assign	wb32_gpio_data= wb32_sio_data;
	assign	wb32_gpio_sel = wb32_sio_sel;
	assign	wb32_sirefclk_cyc = wb32_sio_cyc;
	assign	wb32_sirefclk_stb = wb32_sio_stb && (wb32_sio_addr[ 2: 0] ==  3'h2);  // 0x08
	assign	wb32_sirefclk_we  = wb32_sio_we;
	assign	wb32_sirefclk_data= wb32_sio_data;
	assign	wb32_sirefclk_sel = wb32_sio_sel;
	assign	wb32_spio_cyc = wb32_sio_cyc;
	assign	wb32_spio_stb = wb32_sio_stb && (wb32_sio_addr[ 2: 0] ==  3'h3);  // 0x0c
	assign	wb32_spio_we  = wb32_sio_we;
	assign	wb32_spio_data= wb32_sio_data;
	assign	wb32_spio_sel = wb32_sio_sel;
	assign	wb32_version_cyc = wb32_sio_cyc;
	assign	wb32_version_stb = wb32_sio_stb && (wb32_sio_addr[ 2: 0] ==  3'h4);  // 0x10
	assign	wb32_version_we  = wb32_sio_we;
	assign	wb32_version_data= wb32_sio_data;
	assign	wb32_version_sel = wb32_sio_sel;
	//
	// No class DOUBLE peripherals on the "wb32" bus
	//

	assign	wb32_flashcfg_err= 1'b0;
	assign	wb32_cfgscope_err= 1'b0;
	assign	wb32_fanscope_err= 1'b0;
	assign	wb32_flashdbg_err= 1'b0;
	assign	wb32_i2cscope_err= 1'b0;
	assign	wb32_scope_smi_err= 1'b0;
	assign	wb32_sdioscope_err= 1'b0;
	assign	wb32_i2cs_err= 1'b0;
	assign	wb32_i2cdma_err= 1'b0;
	assign	wb32_uart_err= 1'b0;
	assign	wb32_fan_err= 1'b0;
	assign	wb32_sdcard_err= 1'b0;
	assign	wb32_sio_err= 1'b0;
	assign	wb32_cfg_err= 1'b0;
	//
	// Connect the wb32 bus components together using the wbxbar()
	//
	//
	wbxbar #(
		.NM(1), .NS(14), .AW(8), .DW(32),
		.SLAVE_ADDR({
			// Address width    = 8
			// Address LSBs     = 2
			// Slave name width = 9
			{ 8'h80 }, //       cfg: 0x200
			{ 8'h60 }, //  wb32_sio: 0x180
			{ 8'h58 }, //    sdcard: 0x160
			{ 8'h50 }, //       fan: 0x140
			{ 8'h48 }, //      uart: 0x120
			{ 8'h40 }, //    i2cdma: 0x100
			{ 8'h38 }, //       i2c: 0x0e0
			{ 8'h30 }, // sdioscope: 0x0c0
			{ 8'h28 }, // scope_smi: 0x0a0
			{ 8'h20 }, //  i2cscope: 0x080
			{ 8'h18 }, //  flashdbg: 0x060
			{ 8'h10 }, //  fanscope: 0x040
			{ 8'h08 }, //  cfgscope: 0x020
			{ 8'h00 }  //  flashcfg: 0x000
		}),
		.SLAVE_MASK({
			// Address width    = 8
			// Address LSBs     = 2
			// Slave name width = 9
			{ 8'he0 }, //       cfg
			{ 8'hf8 }, //  wb32_sio
			{ 8'hf8 }, //    sdcard
			{ 8'hf8 }, //       fan
			{ 8'hf8 }, //      uart
			{ 8'hf8 }, //    i2cdma
			{ 8'hf8 }, //       i2c
			{ 8'hf8 }, // sdioscope
			{ 8'hf8 }, // scope_smi
			{ 8'hf8 }, //  i2cscope
			{ 8'hf8 }, //  flashdbg
			{ 8'hf8 }, //  fanscope
			{ 8'hf8 }, //  cfgscope
			{ 8'hf8 }  //  flashcfg
		}),
		.OPT_DBLBUFFER(1'b1))
	wb32_xbar(
		.i_clk(i_clk), .i_reset(i_reset),
		.i_mcyc({
			wb32_wbdown_cyc
		}),
		.i_mstb({
			wb32_wbdown_stb
		}),
		.i_mwe({
			wb32_wbdown_we
		}),
		.i_maddr({
			wb32_wbdown_addr
		}),
		.i_mdata({
			wb32_wbdown_data
		}),
		.i_msel({
			wb32_wbdown_sel
		}),
		.o_mstall({
			wb32_wbdown_stall
		}),
		.o_mack({
			wb32_wbdown_ack
		}),
		.o_mdata({
			wb32_wbdown_idata
		}),
		.o_merr({
			wb32_wbdown_err
		}),
		// Slave connections
		.o_scyc({
			wb32_cfg_cyc,
			wb32_sio_cyc,
			wb32_sdcard_cyc,
			wb32_fan_cyc,
			wb32_uart_cyc,
			wb32_i2cdma_cyc,
			wb32_i2cs_cyc,
			wb32_sdioscope_cyc,
			wb32_scope_smi_cyc,
			wb32_i2cscope_cyc,
			wb32_flashdbg_cyc,
			wb32_fanscope_cyc,
			wb32_cfgscope_cyc,
			wb32_flashcfg_cyc
		}),
		.o_sstb({
			wb32_cfg_stb,
			wb32_sio_stb,
			wb32_sdcard_stb,
			wb32_fan_stb,
			wb32_uart_stb,
			wb32_i2cdma_stb,
			wb32_i2cs_stb,
			wb32_sdioscope_stb,
			wb32_scope_smi_stb,
			wb32_i2cscope_stb,
			wb32_flashdbg_stb,
			wb32_fanscope_stb,
			wb32_cfgscope_stb,
			wb32_flashcfg_stb
		}),
		.o_swe({
			wb32_cfg_we,
			wb32_sio_we,
			wb32_sdcard_we,
			wb32_fan_we,
			wb32_uart_we,
			wb32_i2cdma_we,
			wb32_i2cs_we,
			wb32_sdioscope_we,
			wb32_scope_smi_we,
			wb32_i2cscope_we,
			wb32_flashdbg_we,
			wb32_fanscope_we,
			wb32_cfgscope_we,
			wb32_flashcfg_we
		}),
		.o_saddr({
			wb32_cfg_addr,
			wb32_sio_addr,
			wb32_sdcard_addr,
			wb32_fan_addr,
			wb32_uart_addr,
			wb32_i2cdma_addr,
			wb32_i2cs_addr,
			wb32_sdioscope_addr,
			wb32_scope_smi_addr,
			wb32_i2cscope_addr,
			wb32_flashdbg_addr,
			wb32_fanscope_addr,
			wb32_cfgscope_addr,
			wb32_flashcfg_addr
		}),
		.o_sdata({
			wb32_cfg_data,
			wb32_sio_data,
			wb32_sdcard_data,
			wb32_fan_data,
			wb32_uart_data,
			wb32_i2cdma_data,
			wb32_i2cs_data,
			wb32_sdioscope_data,
			wb32_scope_smi_data,
			wb32_i2cscope_data,
			wb32_flashdbg_data,
			wb32_fanscope_data,
			wb32_cfgscope_data,
			wb32_flashcfg_data
		}),
		.o_ssel({
			wb32_cfg_sel,
			wb32_sio_sel,
			wb32_sdcard_sel,
			wb32_fan_sel,
			wb32_uart_sel,
			wb32_i2cdma_sel,
			wb32_i2cs_sel,
			wb32_sdioscope_sel,
			wb32_scope_smi_sel,
			wb32_i2cscope_sel,
			wb32_flashdbg_sel,
			wb32_fanscope_sel,
			wb32_cfgscope_sel,
			wb32_flashcfg_sel
		}),
		.i_sstall({
			wb32_cfg_stall,
			wb32_sio_stall,
			wb32_sdcard_stall,
			wb32_fan_stall,
			wb32_uart_stall,
			wb32_i2cdma_stall,
			wb32_i2cs_stall,
			wb32_sdioscope_stall,
			wb32_scope_smi_stall,
			wb32_i2cscope_stall,
			wb32_flashdbg_stall,
			wb32_fanscope_stall,
			wb32_cfgscope_stall,
			wb32_flashcfg_stall
		}),
		.i_sack({
			wb32_cfg_ack,
			wb32_sio_ack,
			wb32_sdcard_ack,
			wb32_fan_ack,
			wb32_uart_ack,
			wb32_i2cdma_ack,
			wb32_i2cs_ack,
			wb32_sdioscope_ack,
			wb32_scope_smi_ack,
			wb32_i2cscope_ack,
			wb32_flashdbg_ack,
			wb32_fanscope_ack,
			wb32_cfgscope_ack,
			wb32_flashcfg_ack
		}),
		.i_sdata({
			wb32_cfg_idata,
			wb32_sio_idata,
			wb32_sdcard_idata,
			wb32_fan_idata,
			wb32_uart_idata,
			wb32_i2cdma_idata,
			wb32_i2cs_idata,
			wb32_sdioscope_idata,
			wb32_scope_smi_idata,
			wb32_i2cscope_idata,
			wb32_flashdbg_idata,
			wb32_fanscope_idata,
			wb32_cfgscope_idata,
			wb32_flashcfg_idata
		}),
		.i_serr({
			wb32_cfg_err,
			wb32_sio_err,
			wb32_sdcard_err,
			wb32_fan_err,
			wb32_uart_err,
			wb32_i2cdma_err,
			wb32_i2cs_err,
			wb32_sdioscope_err,
			wb32_scope_smi_err,
			wb32_i2cscope_err,
			wb32_flashdbg_err,
			wb32_fanscope_err,
			wb32_cfgscope_err,
			wb32_flashcfg_err
		})
		);

	// End of bus logic for wb32
	// }}}
	//
	// BUS-LOGIC for wbu
	// {{{
	//
	// No class SINGLE peripherals on the "wbu" bus
	//

	//
	// No class DOUBLE peripherals on the "wbu" bus
	//

	// info: @ERROR.WIRE for wbu_arbiter matches the buses error name, wbu_wbu_arbiter_err
	assign	wbu_zip_err= 1'b0;
	//
	// Connect the wbu bus components together using the wbxbar()
	//
	//
	wbxbar #(
		.NM(1), .NS(2), .AW(25), .DW(32),
		.SLAVE_ADDR({
			// Address width    = 25
			// Address LSBs     = 2
			// Slave name width = 11
			{ 25'h1000000 }, //         zip: 0x4000000
			{ 25'h0000000 }  // wbu_arbiter: 0x0000000
		}),
		.SLAVE_MASK({
			// Address width    = 25
			// Address LSBs     = 2
			// Slave name width = 11
			{ 25'h1000000 }, //         zip
			{ 25'h1000000 }  // wbu_arbiter
		}),
		.OPT_DBLBUFFER(1'b1))
	wbu_xbar(
		.i_clk(i_clk), .i_reset(i_reset),
		.i_mcyc({
			wbu_cyc
		}),
		.i_mstb({
			wbu_stb
		}),
		.i_mwe({
			wbu_we
		}),
		.i_maddr({
			wbu_addr
		}),
		.i_mdata({
			wbu_data
		}),
		.i_msel({
			wbu_sel
		}),
		.o_mstall({
			wbu_stall
		}),
		.o_mack({
			wbu_ack
		}),
		.o_mdata({
			wbu_idata
		}),
		.o_merr({
			wbu_err
		}),
		// Slave connections
		.o_scyc({
			wbu_zip_cyc,
			wbu_wbu_arbiter_cyc
		}),
		.o_sstb({
			wbu_zip_stb,
			wbu_wbu_arbiter_stb
		}),
		.o_swe({
			wbu_zip_we,
			wbu_wbu_arbiter_we
		}),
		.o_saddr({
			wbu_zip_addr,
			wbu_wbu_arbiter_addr
		}),
		.o_sdata({
			wbu_zip_data,
			wbu_wbu_arbiter_data
		}),
		.o_ssel({
			wbu_zip_sel,
			wbu_wbu_arbiter_sel
		}),
		.i_sstall({
			wbu_zip_stall,
			wbu_wbu_arbiter_stall
		}),
		.i_sack({
			wbu_zip_ack,
			wbu_wbu_arbiter_ack
		}),
		.i_sdata({
			wbu_zip_idata,
			wbu_wbu_arbiter_idata
		}),
		.i_serr({
			wbu_zip_err,
			wbu_wbu_arbiter_err
		})
		);

	// End of bus logic for wbu
	// }}}
	//
	// BUS-LOGIC for wbflash
	// {{{
//
// Bus wbflash has only one master (wbflash_wbflashdn) and one slave (wbflash_flash)
// connected to it -- skipping the interconnect
//
	assign	wbflash_flash_cyc  = wbflash_wbflashdn_cyc;
	assign	wbflash_flash_stb  = wbflash_wbflashdn_stb;
	assign	wbflash_flash_we   = wbflash_wbflashdn_we;
	assign	wbflash_flash_addr = wbflash_wbflashdn_addr;
	assign	wbflash_flash_data = wbflash_wbflashdn_data;
	assign	wbflash_flash_sel  = wbflash_wbflashdn_sel;
	assign	wbflash_flash_err = 1'b0;
	assign	wbflash_wbflashdn_err = wbflash_flash_err; // Y
	assign	wbflash_wbflashdn_stall = wbflash_flash_stall;
	assign	wbflash_wbflashdn_ack   = wbflash_flash_ack;
	assign	wbflash_wbflashdn_idata = wbflash_flash_idata;
	// End of bus logic for wbflash
	// }}}
	// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// Declare the interrupt busses
	// {{{
	// Interrupt busses are defined by anything with a @PIC tag.
	// The @PIC.BUS tag defines the name of the wire bus below,
	// while the @PIC.MAX tag determines the size of the bus width.
	//
	// For your peripheral to be assigned to this bus, it must have an
	// @INT.NAME.WIRE= tag to define the wire name of the interrupt line,
	// and an @INT.NAME.PIC= tag matching the @PIC.BUS tag of the bus
	// your interrupt will be assigned to.  If an @INT.NAME.ID tag also
	// exists, then your interrupt will be assigned to the position given
	// by the ID# in that tag.
	//
	assign	sys_int_vector = {
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		flashdbg_int,
		uarttxf_int,
		uartrxf_int,
		sdcard_int,
		spio_int,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0
	};
	assign	alt_int_vector = {
		sdioscope_int,
		uartrx_int,
		uarttx_int,
		fanscope_int,
		gpio_int,
		scope_smi_int,
		i2cscope_int,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0
	};
	// }}}
	////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////
	//
	// @MAIN.INSERT and @MAIN.ALT
	// {{{
	////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////
	//
	//
	// Now we turn to defining all of the parts and pieces of what
	// each of the various peripherals does, and what logic it needs.
	//
	// This information comes from the @MAIN.INSERT and @MAIN.ALT tags.
	// If an @ACCESS tag is available, an ifdef is created to handle
	// having the access and not.  If the @ACCESS tag is `defined above
	// then the @MAIN.INSERT code is executed.  If not, the @MAIN.ALT
	// code is exeucted, together with any other cleanup settings that
	// might need to take place--such as returning zeros to the bus,
	// or making sure all of the various interrupt wires are set to
	// zero if the component is not included.
	//
`ifdef	NETLED_ACCESS
	// {{{
	netled
	u_netled(
		.i_clk(i_clk),
		.o_linkup(o_gnet_linkup),
		.o_activity(o_gnet_activity)
	);
	// }}}
`else	// NETLED_ACCESS
	// {{{
	// }}}
`endif	// NETLED_ACCESS

`ifdef	I2CSCOPE_SCOPC
	// {{{
	wbscopc #(
		// {{{
		.LGMEM(10),
		.SYNCHRONOUS(1),
		.DEFAULT_HOLDOFF(508)
		// }}}
	) i2cscopei(
		// {{{
		i_clk, 1'b1, i2c_debug[31], i2c_debug[30:0],
		i_clk,
		wb32_i2cscope_cyc, wb32_i2cscope_stb, wb32_i2cscope_we,
			wb32_i2cscope_addr[1-1:0],
			wb32_i2cscope_data, // 32 bits wide
			wb32_i2cscope_sel,  // 32/8 bits wide
		wb32_i2cscope_stall, wb32_i2cscope_ack, wb32_i2cscope_idata,
		i2cscope_int
		// }}}
	);
	// }}}
`else	// I2CSCOPE_SCOPC
	// {{{
	// Null bus slave
	// {{{

	//
	// In the case that there is no wb32_i2cscope peripheral
	// responding on the wb32 bus
	assign	wb32_i2cscope_ack   = 1'b0;
	assign	wb32_i2cscope_err   = (wb32_i2cscope_stb);
	assign	wb32_i2cscope_stall = 0;
	assign	wb32_i2cscope_idata = 0;

	// }}}
	// Null interrupt definitions
	// {{{
	assign	i2cscope_int = 1'b0;	// i2cscope.INT.I2CSCOPE.WIRE
	// }}}
	// }}}
`endif	// I2CSCOPE_SCOPC

`ifdef	SIREFCLK_ACCESS
	// {{{
	////////////////////////////////////////////////////////////////////////
	//
	// Generated clock handling
	// {{{
	//
	// Set to 0x2f85_1ec0 for 148.5MHz
	//
	initial	r_sirefclk_en   = 1'b0;
	initial	r_sirefclk_data = 30'd20000;
	always @(posedge i_clk)
	if (wb32_sirefclk_stb && wb32_sirefclk_we)
	begin
		if (wb32_sirefclk_sel[0])
			r_sirefclk_data[ 7: 0] <= wb32_sirefclk_data[ 7:0];
		if (wb32_sirefclk_sel[1])
			r_sirefclk_data[15: 8] <= wb32_sirefclk_data[15:8];
		if (wb32_sirefclk_sel[2])
			r_sirefclk_data[23:16] <= wb32_sirefclk_data[23:16];
		if (wb32_sirefclk_sel[3])
		begin
			r_sirefclk_en <= !wb32_sirefclk_data[31];
			r_sirefclk_data[29:24]<= wb32_sirefclk_data[29:24];
		end
	end

	always @(posedge i_clk)
	if (i_reset)
		r_sirefclk_ack <= 1'b0;
	else
		r_sirefclk_ack <= wb32_sirefclk_stb;

	assign	wb32_sirefclk_ack   = r_sirefclk_ack;
	assign	wb32_sirefclk_stall = 1'b0;
	assign	wb32_sirefclk_idata = { !r_sirefclk_en,
						1'b0, r_sirefclk_data };
	assign	o_sirefclk_ce = r_sirefclk_en;

	genclk
	clock_generator(
		.i_clk(i_clk),
		.i_delay({ 2'b00, r_sirefclk_data[29:0] }),
		.o_word(o_sirefclk_word),
		.o_stb(w_sirefclk_unused_stb)
	);
	// }}}
	// }}}
`else	// SIREFCLK_ACCESS
	// {{{
	// }}}
`endif	// SIREFCLK_ACCESS

	////////////////////////////////////////////////////////////////////////
	//
	// WBUBUS "wbu_arbiter" master->slave connection
	// {{{
	wbupsz #(
		// {{{
		.ADDRESS_WIDTH(20+$clog2(512/8)),
		.SMALL_DW(32),
		.WIDE_DW(512),
		.OPT_LITTLE_ENDIAN(1'b0)
		// }}}
	) wbu_arbiter_upsz (
		// {{{
		.i_clk(i_clk),
		.i_reset(i_reset),
		.i_scyc(wbu_wbu_arbiter_cyc), .i_sstb(wbu_wbu_arbiter_stb), .i_swe(wbu_wbu_arbiter_we),
			.i_saddr(wbu_wbu_arbiter_addr[24-1:0]),
			.i_sdata(wbu_wbu_arbiter_data), // 32 bits wide
			.i_ssel(wbu_wbu_arbiter_sel),  // 32/8 bits wide
		.o_sstall(wbu_wbu_arbiter_stall),.o_sack(wbu_wbu_arbiter_ack), .o_sdata(wbu_wbu_arbiter_idata), .o_serr(wbu_wbu_arbiter_err),
		.o_wcyc(wbwide_wbu_arbiter_cyc), .o_wstb(wbwide_wbu_arbiter_stb), .o_wwe(wbwide_wbu_arbiter_we),
			.o_waddr(wbwide_wbu_arbiter_addr[20-1:0]),
			.o_wdata(wbwide_wbu_arbiter_data), // 512 bits wide
			.o_wsel(wbwide_wbu_arbiter_sel),  // 512/8 bits wide
		.i_wstall(wbwide_wbu_arbiter_stall), .i_wack(wbwide_wbu_arbiter_ack), .i_wdata(wbwide_wbu_arbiter_idata), .i_werr(wbwide_wbu_arbiter_err)
		// }}}
	);
	// }}}
`ifdef	SMISCOPE_SCOPC
	// {{{
	wbscopc #(
		// {{{
		.LGMEM(10),
		.SYNCHRONOUS(1),
		.DEFAULT_HOLDOFF(508)
		// }}}
	) scope_smii(
		// {{{
		i_clk, 1'b1, smi_debug[31], smi_debug[30:0],
		i_clk,
		wb32_scope_smi_cyc, wb32_scope_smi_stb, wb32_scope_smi_we,
			wb32_scope_smi_addr[1-1:0],
			wb32_scope_smi_data, // 32 bits wide
			wb32_scope_smi_sel,  // 32/8 bits wide
		wb32_scope_smi_stall, wb32_scope_smi_ack, wb32_scope_smi_idata,
		scope_smi_int
		// }}}
	);
	// }}}
`else	// SMISCOPE_SCOPC
	// {{{
	// Null bus slave
	// {{{

	//
	// In the case that there is no wb32_scope_smi peripheral
	// responding on the wb32 bus
	assign	wb32_scope_smi_ack   = 1'b0;
	assign	wb32_scope_smi_err   = (wb32_scope_smi_stb);
	assign	wb32_scope_smi_stall = 0;
	assign	wb32_scope_smi_idata = 0;

	// }}}
	// Null interrupt definitions
	// {{{
	assign	scope_smi_int = 1'b0;	// scope_smi.INT.SMISCOPE.WIRE
	// }}}
	// }}}
`endif	// SMISCOPE_SCOPC

`ifdef	SPIO_ACCESS
	// {{{
	//
	// Special purpose I/O driver (buttons, LEDs, and switches)
	//

	spio #(
		.NBTN(5), .NLEDS(8), .NSW(8)
	) spioi(
		.i_clk(i_clk), .i_reset(i_reset),
		.i_wb_cyc(wb32_spio_cyc), .i_wb_stb(wb32_spio_stb), .i_wb_we(wb32_spio_we),
			.i_wb_data(wb32_spio_data), // 32 bits wide
			.i_wb_sel(wb32_spio_sel),  // 32/8 bits wide
		.o_wb_stall(wb32_spio_stall),.o_wb_ack(wb32_spio_ack), .o_wb_data(wb32_spio_idata),
		.i_sw(i_sw), .i_btn(i_btn), .o_led(w_led),
		.o_int(spio_int)
	);

	assign	o_led = w_led;

	// }}}
`else	// SPIO_ACCESS
	// {{{
	assign	w_btn = 0;
	assign	o_led = 0;
	// Null interrupt definitions
	// {{{
	assign	spio_int = 1'b0;	// spio.INT.SPIO.WIRE
	// }}}
	// }}}
`endif	// SPIO_ACCESS

`ifdef	GPIO_ACCESS
	// {{{
	////////////////////////////////////////////////////////////////////////
	//
	// GPIO
	// {{{
	// This interface should allow us to control up to 16 GPIO inputs,
	// and another 16 GPIO outputs.  The interrupt trips when any of
	// the inputs changes.  (Sorry, which input isn't (yet) selectable.)
	//
	// Initially set:
	//	4x Test points to zero
	//	SI5324 reset to 0 (active)
	//	HDMI RX as *not* present
	//	*TRACE* defaults to OFF
	//	*ERROR* defaults to NONE (0)
	localparam [NGPO-1:0]	INITIAL_GPIO = 8'h20;

	wbgpio	#(
		.NIN(NGPI), .NOUT(NGPO), .DEFAULT(INITIAL_GPIO)
	) gpioi(
		// {{{
		i_clk, wb32_gpio_cyc, wb32_gpio_stb, wb32_gpio_we,
			wb32_gpio_data, // 32 bits wide
			wb32_gpio_sel,  // 32/8 bits wide
		wb32_gpio_stall, wb32_gpio_ack, wb32_gpio_idata,
		i_gpio, o_gpio, gpio_int
		// }}}
	);

	// }}}
	// }}}
`else	// GPIO_ACCESS
	// {{{
	// Null interrupt definitions
	// {{{
	assign	gpio_int = 1'b0;	// gpio.INT.GPIO.WIRE
	// }}}
	// }}}
`endif	// GPIO_ACCESS

`ifdef	FLASHCFG_ACCESS
	// {{{
	// The Flash control interface is defined by the flash instantiation
	// hence we don't need to do anything to define it here.
	// }}}
`else	// FLASHCFG_ACCESS
	// {{{
	// Null bus slave
	// {{{

	//
	// In the case that there is no wb32_flashcfg peripheral
	// responding on the wb32 bus
	assign	wb32_flashcfg_ack   = 1'b0;
	assign	wb32_flashcfg_err   = (wb32_flashcfg_stb);
	assign	wb32_flashcfg_stall = 0;
	assign	wb32_flashcfg_idata = 0;

	// }}}
	// }}}
`endif	// FLASHCFG_ACCESS

`ifdef	CFG_ACCESS
	// {{{
`ifdef	VERILATOR
	reg	r_cfg_ack;

	initial	r_cfg_ack = 1'b0;
	always @(posedge i_clk)
		r_cfg_ack <= wb32_cfg_stb;
	assign	wb32_cfg_ack   = r_cfg_ack;
	assign	wb32_cfg_stall = 1'b0;
	assign	wb32_cfg_idata = 32'h00;

	assign	cfg_debug = 32'h00;

	// Verilator lint_off UNUSED
	wire	cfg_unused;
	assign	cfg_unused = &{ 1'b0, ICAPE_LGDIV[31:0] };
	// Verilator lint_on  UNUSED
`else
	wbicapetwo #(
		.LGDIV(ICAPE_LGDIV)
	) u_cfgport(
		.i_clk(i_clk),
		.i_wb_cyc(wb32_cfg_cyc), .i_wb_stb(wb32_cfg_stb), .i_wb_we(wb32_cfg_we),
			.i_wb_addr(wb32_cfg_addr[5-1:0]),
			.i_wb_data(wb32_cfg_data), // 32 bits wide
			.i_wb_sel(wb32_cfg_sel),  // 32/8 bits wide
		.o_wb_stall(wb32_cfg_stall),.o_wb_ack(wb32_cfg_ack), .o_wb_data(wb32_cfg_idata),
		.o_dbg(cfg_debug)
	);
`endif
	// }}}
`else	// CFG_ACCESS
	// {{{
	// Null bus slave
	// {{{

	//
	// In the case that there is no wb32_cfg peripheral
	// responding on the wb32 bus
	assign	wb32_cfg_ack   = 1'b0;
	assign	wb32_cfg_err   = (wb32_cfg_stb);
	assign	wb32_cfg_stall = 0;
	assign	wb32_cfg_idata = 0;

	// }}}
	// }}}
`endif	// CFG_ACCESS

`ifdef	WBUBUS_MASTER
	// {{{
	////////////////////////////////////////////////////////////////////////
	//
	// WBUBUS: USB-UART driven bus master and console
	// {{{
	// The Host USB interface, to be used by the WB-UART bus
	rxuartlite	#(
		// {{{
		.TIMER_BITS(DBGBUSBITS),
		.CLOCKS_PER_BAUD(BUSUART[DBGBUSBITS-1:0])
		// }}}
	) rcv(
		// {{{
		.i_clk(      i_clk),
		.i_uart_rx(i_wbu_uart_rx),
		.o_wr(       wbu_rx_stb),
		.o_data(     wbu_rx_data)
		// }}}
	);

	txuartlite	#(
		// {{{
		.TIMING_BITS(DBGBUSBITS[4:0]),
		.CLOCKS_PER_BAUD(BUSUART[DBGBUSBITS-1:0])
		// }}}
	) txv(
		// {{{
		.i_clk(    i_clk),
		.i_wr(     wbu_tx_stb),
		.i_data(   wbu_tx_data),
		.o_uart_tx(o_wbu_uart_tx),
		.o_busy(   wbu_tx_busy)
		// }}}
	);

	assign	o_wbu_uart_cts_n = 1'b0;

`ifndef	BUSPIC_ACCESS
	wire	w_bus_int;
`ifdef	INCLUDE_ZIPCPU
	assign	w_bus_int = zip_cpu_int;
`else
	assign	w_bus_int = 1'b0;
`endif
`endif
	// Verilator lint_off UNUSED
	wire	[29:0]	wbu_tmp_addr;
	// Verilator lint_on  UNUSED
	wbuconsole #(
		// {{{
		.LGWATCHDOG(DBGBUSWATCHDOG)
		// }}}
	) genbus(
		// {{{
		.i_clk(i_clk), .i_reset(i_reset),
		.i_rx_stb(wbu_rx_stb), .i_rx_data(wbu_rx_data),
		.o_wb_cyc(wbu_cyc), .o_wb_stb(wbu_stb),
			.o_wb_we(wbu_we),
			.o_wb_addr(wbu_tmp_addr),
			.o_wb_data(wbu_data),
		.i_wb_stall(wbu_stall),
			.i_wb_ack(wbu_ack),
		.i_wb_data(wbu_idata),
		.i_wb_err(wbu_err),
		.i_interrupt(w_bus_int),
		.o_tx_stb(wbu_tx_stb), .o_tx_data(wbu_tx_data),
			.i_tx_busy(wbu_tx_busy),
		//
`ifdef	SMI_CONSOLE
		.i_console_stb(w_console_tx_stb || smi_console_valid),
			.i_console_data(smi_console_valid ? smi_console_data[6:0]
					: w_console_tx_data),
`else
		.i_console_stb(w_console_tx_stb),
			.i_console_data(w_console_tx_data),
`endif
			.o_console_busy(w_console_busy),
		.o_console_stb(w_console_rx_stb),
			.o_console_data(w_console_rx_data),
		//
		.o_dbg(wbubus_dbg[0])
		// }}}
	);

`ifdef	SMI_CONSOLE
	assign	smi_console_ready = !w_console_busy;
`endif

	assign	wbu_sel = 4'hf;
	assign	wbu_addr = wbu_tmp_addr[(25-1):0];
	// }}}
	// }}}
`else	// WBUBUS_MASTER
	// {{{
	// Null bus master
	// {{{
	// }}}
	// }}}
`endif	// WBUBUS_MASTER

`ifdef	VERSION_ACCESS
	// {{{
	assign	wb32_version_idata = `DATESTAMP;
	assign	wb32_version_ack = wb32_version_stb;
	assign	wb32_version_stall = 1'b0;
	// }}}
`else	// VERSION_ACCESS
	// {{{
	// }}}
`endif	// VERSION_ACCESS

`ifdef	INCLUDE_ZIPCPU
	// {{{
	////////////////////////////////////////////////////////////////////////
	//
	// The ZipCPU/ZipSystem BUS master
	// {{{
	//
	assign	zip_int_vector = { alt_int_vector[14:8], sys_int_vector[14:6] };
	zipsystem #(
		// {{{
		.RESET_ADDRESS(RESET_ADDRESS),
		.ADDRESS_WIDTH(ZIP_ADDRESS_WIDTH + $clog2(512/8)),
		.BUS_WIDTH(512),
		.OPT_LGICACHE(12),
		.OPT_LGDCACHE(12),
		.START_HALTED(ZIP_START_HALTED),
		.RESET_DURATION(20),
		.OPT_PIPELINED(1),
`ifdef INCLUDE_DMA_CONTROLLER
		.OPT_DMA(1'b1),
`else
		.OPT_DMA(1'b0),
`endif
`ifdef INCLUDE_ACCOUNTING_COUNTERS
		.OPT_ACCOUNTING(1'b1),
`else
		.OPT_ACCOUNTING(1'b0),
`endif
`ifdef	VERILATOR
		.OPT_PROFILER(1'b1),
`else
		.OPT_PROFILER(1'b0),
`endif
`ifdef	ZIPSCOPE_SCOPE
		.OPT_TRACE_PORT(1'b1),
`else
		.OPT_TRACE_PORT(1'b0),
`endif
		.OPT_DISTRIBUTED_REGS(1),
		.EXTERNAL_INTERRUPTS(ZIP_INTS)
		// }}}
	) swic(
		// {{{
		.i_clk(i_clk), .i_reset(i_reset || i_cpu_reset),
			// Zipsys wishbone interface
			.o_wb_cyc(wbwide_zip_cyc), .o_wb_stb(wbwide_zip_stb), .o_wb_we(wbwide_zip_we),
			.o_wb_addr(wbwide_zip_addr[20-1:0]),
			.o_wb_data(wbwide_zip_data), // 512 bits wide
			.o_wb_sel(wbwide_zip_sel),  // 512/8 bits wide
		.i_wb_stall(wbwide_zip_stall), .i_wb_ack(wbwide_zip_ack), .i_wb_data(wbwide_zip_idata), .i_wb_err(wbwide_zip_err),
			.i_ext_int(zip_int_vector), .o_ext_int(zip_cpu_int),
			// Debug wishbone interface
			.i_dbg_cyc(wbu_zip_cyc || cpu_sim_cyc),
			.i_dbg_stb(cpu_sim_cyc ? cpu_sim_stb : wbu_zip_stb),
			.i_dbg_we( cpu_sim_cyc ? cpu_sim_we  : wbu_zip_we),
			.i_dbg_addr(cpu_sim_cyc? cpu_sim_addr : wbu_zip_addr[6:0]),
			.i_dbg_data (cpu_sim_cyc? cpu_sim_data : wbu_zip_data),
			.i_dbg_sel  (cpu_sim_cyc? 4'hf : wbu_zip_sel),
			.o_dbg_stall(raw_cpu_dbg_stall),
			.o_dbg_ack  (raw_cpu_dbg_ack),
			.o_dbg_data (wbu_zip_idata),
			//
			.o_cpu_debug(zip_debug),
			.o_prof_stb(cpu_prof_stb),
			.o_prof_addr(cpu_prof_addr),
			.o_prof_ticks(cpu_prof_ticks)
		// }}}
	);
	assign	zip_trigger = zip_debug[31];

	assign	wbu_zip_stall =  cpu_sim_cyc || raw_cpu_dbg_stall;
	assign	wbu_zip_ack   = !cpu_sim_cyc && raw_cpu_dbg_ack;
	assign	cpu_sim_stall = !cpu_sim_cyc || raw_cpu_dbg_stall;
	assign	cpu_sim_ack   =  cpu_sim_cyc && raw_cpu_dbg_ack;
	assign	cpu_sim_idata = wbu_zip_idata;

	// Keep Verilator happy
	// {{{
	// Verilator lint_off UNUSED
	wire	zip_unused;
	assign	zip_unused = &{ 1'b0,
			alt_int_vector[7:0], sys_int_vector[5:0]};
	// Verilator lint_on  UNUSED
	// }}}
	// }}}
	// }}}
`else	// INCLUDE_ZIPCPU
	// {{{
	// Null bus master
	// {{{
	// }}}
	// Null bus slave
	// {{{

	//
	// In the case that there is no wbu_zip peripheral
	// responding on the wbu bus
	assign	wbu_zip_ack   = 1'b0;
	assign	wbu_zip_err   = (wbu_zip_stb);
	assign	wbu_zip_stall = 0;
	assign	wbu_zip_idata = 0;

	// }}}
	// }}}
`endif	// INCLUDE_ZIPCPU

`ifdef	SMI_CONSOLE
	// {{{
	////////////////////////////////////////////////////////////////////////
	//
	// SMI (Console version)
	// {{{

	smi #(
		.OPT_ASYNC(1'b0), .LGFIFO(8)
	) u_smi (
		// {{{
		.i_clk(i_clk), .i_reset(i_reset),
		// SMI interface
		.i_smi_oen(	i_smi_oen),
		.i_smi_wen(	i_smi_wen),
		.i_smi_sa(	i_smi_sa),
		.i_smi_data(	i_smi_sd),
		.o_smi_data(	o_smi_sd),
		.o_smi_oen(	o_smi_oen),
		// AXI Stream interfaces
		.S_TX_VALID(w_console_rx_stb),
		.S_TX_READY(ign_smi_ready),
		.S_TX_DATA({ 1'b0, w_console_rx_data }),
		//
		.M_RX_VALID(smi_console_valid),
		.M_RX_READY(smi_console_ready),
		.M_RX_DATA(smi_console_data),
		//
		.o_debug(smi_debug)
		// }}}
	);

	// }}}
	// }}}
`else	// SMI_CONSOLE
	// {{{
	// }}}
`endif	// SMI_CONSOLE

	assign	wb32_buildtime_idata = `BUILDTIME;
	assign	wb32_buildtime_ack = wb32_buildtime_stb;
	assign	wb32_buildtime_stall = 1'b0;
`ifdef	FANSCOPE_SCOPC
	// {{{
	wbscopc #(
		// {{{
		.LGMEM(10),
		.SYNCHRONOUS(1),
		.DEFAULT_HOLDOFF(508)
		// }}}
	) fanscopei(
		// {{{
		i_clk, 1'b1, fan_debug[31], fan_debug[30:0],
		i_clk,
		wb32_fanscope_cyc, wb32_fanscope_stb, wb32_fanscope_we,
			wb32_fanscope_addr[1-1:0],
			wb32_fanscope_data, // 32 bits wide
			wb32_fanscope_sel,  // 32/8 bits wide
		wb32_fanscope_stall, wb32_fanscope_ack, wb32_fanscope_idata,
		fanscope_int
		// }}}
	);
	// }}}
`else	// FANSCOPE_SCOPC
	// {{{
	// Null bus slave
	// {{{

	//
	// In the case that there is no wb32_fanscope peripheral
	// responding on the wb32 bus
	assign	wb32_fanscope_ack   = 1'b0;
	assign	wb32_fanscope_err   = (wb32_fanscope_stb);
	assign	wb32_fanscope_stall = 0;
	assign	wb32_fanscope_idata = 0;

	// }}}
	// Null interrupt definitions
	// {{{
	assign	fanscope_int = 1'b0;	// fanscope.INT.FANSCOPE.WIRE
	// }}}
	// }}}
`endif	// FANSCOPE_SCOPC

`ifdef	SDIO_ACCESS
	// {{{
	////////////////////////////////////////////////////////////////////////
	//
	// SDIO SD Card handling
	// {{{
	////////////////////////////////////////////////////////////////////////
	//
	//

	sdio_top #(
		.NUMIO(4),
		.OPT_SERDES(1'b0),
		.OPT_DDR(1'b1),
		.OPT_CARD_DETECT(1'b1),
		.MW(32)
	) u_sdcard(
		// {{{
		.i_clk(i_clk),
		.i_reset(i_reset),
		.i_hsclk(1'b0),
		.i_wb_cyc(wb32_sdcard_cyc), .i_wb_stb(wb32_sdcard_stb), .i_wb_we(wb32_sdcard_we),
			.i_wb_addr(wb32_sdcard_addr[3-1:0]),
			.i_wb_data(wb32_sdcard_data), // 32 bits wide
			.i_wb_sel(wb32_sdcard_sel),  // 32/8 bits wide
		.o_wb_stall(wb32_sdcard_stall),.o_wb_ack(wb32_sdcard_ack), .o_wb_data(wb32_sdcard_idata),
		.o_ck(o_sdcard_clk),
		.i_ds(i_sdcard_ds),
`ifdef	VERILATOR
		.io_cmd_tristate(io_sdcard_cmd_tristate),
		.o_cmd(o_sdcard_cmd),
		.i_cmd(i_sdcard_cmd),
		.io_dat_tristate(io_sdcard_dat_tristate),
		.o_dat(o_sdcard_dat),
		.i_dat(i_sdcard_dat),
`else
		.io_cmd(io_sdcard_cmd),
		.io_dat(io_sdcard_dat),
`endif
		.i_card_detect(i_sdcard_detect),
		.o_int(sdcard_int),
		.o_debug(sdcard_debug)
		// }}}
	);

	// }}}
	// }}}
`else	// SDIO_ACCESS
	// {{{
	assign	o_sdcard_clk = 1'b1;
`ifdef	VERILATOR
	assign	io_sdcard_cmd_tristate = 1'b1;
	assign	o_sdcard_cmd = 1'b1;
	assign	io_sdcard_data_tristate  = -1;
	assign	o_sdcard_data = -1;
`else	// VERILATOR
	assign	io_sdcard_cmd  = 1'b1;
	assign	io_sdcard_dat  = -1;
`endif	// VERILATOR
	// Null bus slave
	// {{{

	//
	// In the case that there is no wb32_sdcard peripheral
	// responding on the wb32 bus
	assign	wb32_sdcard_ack   = 1'b0;
	assign	wb32_sdcard_err   = (wb32_sdcard_stb);
	assign	wb32_sdcard_stall = 0;
	assign	wb32_sdcard_idata = 0;

	// }}}
	// Null interrupt definitions
	// {{{
	assign	sdcard_int = 1'b0;	// sdcard.INT.SDCARD.WIRE
	// }}}
	// }}}
`endif	// SDIO_ACCESS

	wbdown #(
		// {{{
		.ADDRESS_WIDTH(8+$clog2(32/8)),
		.WIDE_DW(512),
		.SMALL_DW(32),
		.OPT_LITTLE_ENDIAN(1'b0),
		.OPT_LOWLOGIC(1'b0)
		// }}}
	) u_wbdown (
		// {{{
		.i_clk(i_clk),
		.i_reset(i_reset),
		// Slave/incoming
		// {{{
		.i_wcyc(  wbwide_wbdown_cyc),
		.i_wstb(  wbwide_wbdown_stb),
		.i_wwe(   wbwide_wbdown_we),
		.i_waddr( wbwide_wbdown_addr[4-1:0]),
		.i_wdata( wbwide_wbdown_data),
		.i_wsel(  wbwide_wbdown_sel),
		.o_wstall(wbwide_wbdown_stall),
		.o_wack(  wbwide_wbdown_ack),
		.o_wdata( wbwide_wbdown_idata),
		.o_werr(  wbwide_wbdown_err),
		// }}}
		// Master/down-range/outgoing
		// {{{
		.o_scyc(  wb32_wbdown_cyc),
		.o_sstb(  wb32_wbdown_stb),
		.o_swe(   wb32_wbdown_we),
		.o_saddr( wb32_wbdown_addr[8-1:0]),
		.o_sdata( wb32_wbdown_data),
		.o_ssel(  wb32_wbdown_sel),
		.i_sstall(wb32_wbdown_stall),
		.i_sack(  wb32_wbdown_ack),
		.i_sdata( wb32_wbdown_idata),
		.i_serr(  wb32_wbdown_err)
		// }}}
		// }}}
	);
`ifdef	FLASH_ACCESS
	// {{{
	////////////////////////////////////////////////////////////////////////
	//
	// Flash controller
	// {{{
	qflexpress #(
		// {{{
		.LGFLASHSZ(25), .OPT_CLKDIV(1),
		.OPT_ENDIANSWAP(0),
		.NDUMMY(8), .RDDELAY(1),
		.OPT_STARTUP_FILE("micron.hex"),
`ifdef	FLASHCFG_ACCESS
		.OPT_CFG(1'b1)
`else
		.OPT_CFG(1'b0)
`endif
		// }}}
	) flashi(
		// {{{
		.i_clk(i_clk),
		.i_reset(i_reset),
		// Primary memory reading inputs
		.i_wb_cyc(wbflash_flash_cyc), .i_wb_stb(wbflash_flash_stb), .i_wb_we(wbflash_flash_we),
			.i_wb_addr(wbflash_flash_addr[23-1:0]),
			.i_wb_data(wbflash_flash_data), // 32 bits wide
			.i_wb_sel(wbflash_flash_sel),  // 32/8 bits wide
		.o_wb_stall(wbflash_flash_stall),.o_wb_ack(wbflash_flash_ack), .o_wb_data(wbflash_flash_idata),
		// Configuration bus ports
		.i_cfg_cyc(wb32_flashcfg_cyc), .i_cfg_stb(wb32_flashcfg_stb), .i_cfg_we(wb32_flashcfg_we),
			.i_cfg_data(wb32_flashcfg_data), // 32 bits wide
			.i_cfg_sel(wb32_flashcfg_sel),  // 32/8 bits wide
		.o_cfg_stall(wb32_flashcfg_stall),.o_cfg_ack(wb32_flashcfg_ack), .o_cfg_data(wb32_flashcfg_idata),
		.o_qspi_sck(o_flash_sck),
		.o_qspi_cs_n(o_flash_cs_n),
		.o_qspi_mod(o_flash_mod),
		.o_qspi_dat(o_flash_dat),
		.i_qspi_dat(i_flash_dat),
		.o_dbg_trigger(flash_dbg_trigger),
		.o_debug(flash_debug)
		// }}}
	);
	// }}}
	// }}}
`else	// FLASH_ACCESS
	// {{{
	assign	o_flash_sck  = 1'b1;
	assign	o_flash_cs_n = 1'b1;
	assign	o_flash_mod  = 2'b01;
	assign	o_flash_dat  = 4'b1111;
	// Verilator lint_off UNUSED
	wire	flash_unused = &{ 1'b0, i_flash_dat };
	// Verilator lint_on UNUSED
	// Null bus slave
	// {{{

	//
	// In the case that there is no wbflash_flash peripheral
	// responding on the wbflash bus
	assign	wbflash_flash_ack   = 1'b0;
	assign	wbflash_flash_err   = (wbflash_flash_stb);
	assign	wbflash_flash_stall = 0;
	assign	wbflash_flash_idata = 0;

	// }}}
	// }}}
`endif	// FLASH_ACCESS

`ifdef	I2CCPU_ACCESS
	// {{{
	////////////////////////////////////////////////////////////////////////
	//
	// The I2C Controller
	// {{{

	wbi2ccpu #(
		.ADDRESS_WIDTH(20),
		.DATA_WIDTH(512),
		.AXIS_ID_WIDTH(2)
	) i2ci (
		// {{{
		.i_clk(i_clk), .i_reset(i_reset),
		.i_wb_cyc(wb32_i2cs_cyc), .i_wb_stb(wb32_i2cs_stb), .i_wb_we(wb32_i2cs_we),
			.i_wb_addr(wb32_i2cs_addr[2-1:0]),
			.i_wb_data(wb32_i2cs_data), // 32 bits wide
			.i_wb_sel(wb32_i2cs_sel),  // 32/8 bits wide
		.o_wb_stall(wb32_i2cs_stall),.o_wb_ack(wb32_i2cs_ack), .o_wb_data(wb32_i2cs_idata),
		.o_pf_cyc(wbwide_i2cm_cyc), .o_pf_stb(wbwide_i2cm_stb), .o_pf_we(wbwide_i2cm_we),
			.o_pf_addr(wbwide_i2cm_addr[20-1:0]),
			.o_pf_data(wbwide_i2cm_data), // 512 bits wide
			.o_pf_sel(wbwide_i2cm_sel),  // 512/8 bits wide
		.i_pf_stall(wbwide_i2cm_stall), .i_pf_ack(wbwide_i2cm_ack), .i_pf_data(wbwide_i2cm_idata), .i_pf_err(wbwide_i2cm_err),
		.i_i2c_sda(i_i2c_sda), .i_i2c_scl(i_i2c_scl),
		.o_i2c_sda(o_i2c_sda), .o_i2c_scl(o_i2c_scl),
		.M_AXIS_TVALID(i2c_valid), .M_AXIS_TREADY(i2c_ready),
			.M_AXIS_TDATA(i2c_data), .M_AXIS_TLAST(i2c_last),
			.M_AXIS_TID(i2c_id),
		.i_sync_signal(1'b0),
		//
		.o_debug(i2c_debug)
		// }}}
	);

	assign	i2c_ready = (!i2c_valid) || (1'b0
			|| (i2c_id == 0)		// NULL address
`ifdef	EDID_ACCESS
			|| (i2c_id == 1 && edid_ready)
`else
			|| (i2c_id == 1)
`endif
`ifdef	I2CDMA_ACCESS
			|| (i2c_id == 2 && i2cdma_ready)
`else
			|| (i2c_id == 2)
`endif
			|| (i2c_id > 2));

	// }}}
	// }}}
`else	// I2CCPU_ACCESS
	// {{{
	assign	o_i2c_scl = 1'b1;
	assign	o_i2c_sda = 1'b1;
	// Null bus master
	// {{{
	// }}}
	// Null bus slave
	// {{{

	//
	// In the case that there is no wb32_i2cs peripheral
	// responding on the wb32 bus
	assign	wb32_i2cs_ack   = 1'b0;
	assign	wb32_i2cs_err   = (wb32_i2cs_stb);
	assign	wb32_i2cs_stall = 0;
	assign	wb32_i2cs_idata = 0;

	// }}}
	// }}}
`endif	// I2CCPU_ACCESS

	wbdown #(
		// {{{
		.ADDRESS_WIDTH(23+$clog2(32/8)),
		.WIDE_DW(512),
		.SMALL_DW(32),
		.OPT_LITTLE_ENDIAN(1'b0),
		.OPT_LOWLOGIC(1'b0)
		// }}}
	) u_wbflashdn (
		// {{{
		.i_clk(i_clk),
		.i_reset(i_reset),
		// Slave/incoming
		// {{{
		.i_wcyc(  wbwide_wbflashdn_cyc),
		.i_wstb(  wbwide_wbflashdn_stb),
		.i_wwe(   wbwide_wbflashdn_we),
		.i_waddr( wbwide_wbflashdn_addr[19-1:0]),
		.i_wdata( wbwide_wbflashdn_data),
		.i_wsel(  wbwide_wbflashdn_sel),
		.o_wstall(wbwide_wbflashdn_stall),
		.o_wack(  wbwide_wbflashdn_ack),
		.o_wdata( wbwide_wbflashdn_idata),
		.o_werr(  wbwide_wbflashdn_err),
		// }}}
		// Master/down-range/outgoing
		// {{{
		.o_scyc(  wbflash_wbflashdn_cyc),
		.o_sstb(  wbflash_wbflashdn_stb),
		.o_swe(   wbflash_wbflashdn_we),
		.o_saddr( wbflash_wbflashdn_addr[23-1:0]),
		.o_sdata( wbflash_wbflashdn_data),
		.o_ssel(  wbflash_wbflashdn_sel),
		.i_sstall(wbflash_wbflashdn_stall),
		.i_sack(  wbflash_wbflashdn_ack),
		.i_sdata( wbflash_wbflashdn_idata),
		.i_serr(  wbflash_wbflashdn_err)
		// }}}
		// }}}
	);
`ifdef	FAN_ACCESS
	// {{{
	////////////////////////////////////////////////////////////////////////
	//
	// The FAN Controller: fan
	// {{{

	wbfan
	u_fan (
		// {{{
		.i_clk(i_clk),
		.i_reset(i_reset),
		.i_wb_cyc(wb32_fan_cyc), .i_wb_stb(wb32_fan_stb), .i_wb_we(wb32_fan_we),
			.i_wb_addr(wb32_fan_addr[3-1:0]),
			.i_wb_data(wb32_fan_data), // 32 bits wide
			.i_wb_sel(wb32_fan_sel),  // 32/8 bits wide
		.o_wb_stall(wb32_fan_stall),.o_wb_ack(wb32_fan_ack), .o_wb_data(wb32_fan_idata),
		.i_temp_sda(i_fan_sda), .i_temp_scl(i_fan_scl),
		.o_temp_sda(o_fan_sda), .o_temp_scl(o_fan_scl),
		//
		.o_fpga_pwm(o_fpga_pwm), .o_sys_pwm(o_sys_pwm),
		.i_fan_tach(i_fan_tach),
		//
		.temp_debug(fan_debug)
		// }}}
	);
	// }}}
	// }}}
`else	// FAN_ACCESS
	// {{{
	assign	o_fan_scl = 1'b1;
	assign	o_fan_sda = 1'b1;
	// Null bus slave
	// {{{

	//
	// In the case that there is no wb32_fan peripheral
	// responding on the wb32 bus
	assign	wb32_fan_ack   = 1'b0;
	assign	wb32_fan_err   = (wb32_fan_stb);
	assign	wb32_fan_stall = 0;
	assign	wb32_fan_idata = 0;

	// }}}
	// }}}
`endif	// FAN_ACCESS

`ifdef	CFGSCOPE_SCOPE
	// {{{
	wbscope #(
		// {{{
		.LGMEM(8),
		.SYNCHRONOUS(1),
		.DEFAULT_HOLDOFF(252)
		// }}}
	) cfgscopei(
		// {{{
		i_clk, 1'b1, cfg_debug[31], cfg_debug,
		i_clk,
		wb32_cfgscope_cyc, wb32_cfgscope_stb, wb32_cfgscope_we,
			wb32_cfgscope_addr[1-1:0],
			wb32_cfgscope_data, // 32 bits wide
			wb32_cfgscope_sel,  // 32/8 bits wide
		wb32_cfgscope_stall, wb32_cfgscope_ack, wb32_cfgscope_idata,
		cfgscope_int
		// }}}
	);
	// }}}
`else	// CFGSCOPE_SCOPE
	// {{{
	// Null bus slave
	// {{{

	//
	// In the case that there is no wb32_cfgscope peripheral
	// responding on the wb32 bus
	assign	wb32_cfgscope_ack   = 1'b0;
	assign	wb32_cfgscope_err   = (wb32_cfgscope_stb);
	assign	wb32_cfgscope_stall = 0;
	assign	wb32_cfgscope_idata = 0;

	// }}}
	// }}}
`endif	// CFGSCOPE_SCOPE

`ifdef	I2CDMA_ACCESS
	// {{{
	wbi2cdma #(
		.AW(20), .DW(512), .SW(8),
		.OPT_LITTLE_ENDIAN(1'b0)
	) u_i2cdma (
		.i_clk(i_clk),
		.i_reset(i_reset),
		//
		.i_wb_cyc(wb32_i2cdma_cyc), .i_wb_stb(wb32_i2cdma_stb), .i_wb_we(wb32_i2cdma_we),
			.i_wb_addr(wb32_i2cdma_addr[2-1:0]),
			.i_wb_data(wb32_i2cdma_data), // 32 bits wide
			.i_wb_sel(wb32_i2cdma_sel),  // 32/8 bits wide
		.o_wb_stall(wb32_i2cdma_stall),.o_wb_ack(wb32_i2cdma_ack), .o_wb_data(wb32_i2cdma_idata),
		.S_VALID(i2c_valid && i2c_id == 2), .S_READY(i2cdma_ready),
			.S_DATA(i2c_data), .S_LAST(i2c_last),
		.o_dma_cyc(wbwide_i2cdma_cyc), .o_dma_stb(wbwide_i2cdma_stb), .o_dma_we(wbwide_i2cdma_we),
			.o_dma_addr(wbwide_i2cdma_addr[20-1:0]),
			.o_dma_data(wbwide_i2cdma_data), // 512 bits wide
			.o_dma_sel(wbwide_i2cdma_sel),  // 512/8 bits wide
		.i_dma_stall(wbwide_i2cdma_stall), .i_dma_ack(wbwide_i2cdma_ack), .i_dma_data(wbwide_i2cdma_idata), .i_dma_err(wbwide_i2cdma_err)
	);

	// }}}
`else	// I2CDMA_ACCESS
	// {{{
	assign	@$(prefix)_ready = 1'b0;
	// Null bus master
	// {{{
	// }}}
	// Null bus slave
	// {{{

	//
	// In the case that there is no wb32_i2cdma peripheral
	// responding on the wb32 bus
	assign	wb32_i2cdma_ack   = 1'b0;
	assign	wb32_i2cdma_err   = (wb32_i2cdma_stb);
	assign	wb32_i2cdma_stall = 0;
	assign	wb32_i2cdma_idata = 0;

	// }}}
	// }}}
`endif	// I2CDMA_ACCESS

`ifdef	BKRAM_ACCESS
	// {{{
	memdev #(
		.LGMEMSZ(18),
		.DW(512),
		.EXTRACLOCK(1)
	) bkrami(
		.i_clk(i_clk),
		.i_reset(i_reset),
		.i_wb_cyc(wbwide_bkram_cyc), .i_wb_stb(wbwide_bkram_stb), .i_wb_we(wbwide_bkram_we),
			.i_wb_addr(wbwide_bkram_addr[12-1:0]),
			.i_wb_data(wbwide_bkram_data), // 512 bits wide
			.i_wb_sel(wbwide_bkram_sel),  // 512/8 bits wide
		.o_wb_stall(wbwide_bkram_stall),.o_wb_ack(wbwide_bkram_ack), .o_wb_data(wbwide_bkram_idata)
	);
	// }}}
`else	// BKRAM_ACCESS
	// {{{
	// Null bus slave
	// {{{

	//
	// In the case that there is no wbwide_bkram peripheral
	// responding on the wbwide bus
	assign	wbwide_bkram_ack   = 1'b0;
	assign	wbwide_bkram_err   = (wbwide_bkram_stb);
	assign	wbwide_bkram_stall = 0;
	assign	wbwide_bkram_idata = 0;

	// }}}
	// }}}
`endif	// BKRAM_ACCESS

`ifdef	BUSCONSOLE_ACCESS
	// {{{
	////////////////////////////////////////////////////////////////////////
	//
	// WBUBUS: Console instantiations
	// {{{
	wbconsole #(.LGFLEN(6)
	) console(
		// {{{
		.i_clk(i_clk), .i_reset(1'b0),
		.i_wb_cyc(wb32_uart_cyc), .i_wb_stb(wb32_uart_stb), .i_wb_we(wb32_uart_we),
			.i_wb_addr(wb32_uart_addr[2-1:0]),
			.i_wb_data(wb32_uart_data), // 32 bits wide
			.i_wb_sel(wb32_uart_sel),  // 32/8 bits wide
		.o_wb_stall(wb32_uart_stall),.o_wb_ack(wb32_uart_ack), .o_wb_data(wb32_uart_idata),
		.o_uart_stb(w_console_tx_stb), .o_uart_data(w_console_tx_data),
`ifdef	SMI_CONSOLE
			.i_uart_busy(w_console_busy || smi_console_valid),
`else
			.i_uart_busy(w_console_busy),
`endif
		.i_uart_stb(w_console_rx_stb), .i_uart_data(w_console_rx_data),
		.o_uart_rx_int(uartrx_int), .o_uart_tx_int(uarttx_int),
		.o_uart_rxfifo_int(uartrxf_int),.o_uart_txfifo_int(uarttxf_int),
		.o_debug(uart_debug)
		// }}}
	);
	// }}}
	// }}}
`else	// BUSCONSOLE_ACCESS
	// {{{
	// Null bus slave
	// {{{

	//
	// In the case that there is no wb32_uart peripheral
	// responding on the wb32 bus
	assign	wb32_uart_ack   = 1'b0;
	assign	wb32_uart_err   = (wb32_uart_stb);
	assign	wb32_uart_stall = 0;
	assign	wb32_uart_idata = 0;

	// }}}
	// Null interrupt definitions
	// {{{
	assign	uartrxf_int = 1'b0;	// uart.INT.UARTRXF.WIRE
	assign	uarttx_int = 1'b0;	// uart.INT.UARTTX.WIRE
	assign	uarttxf_int = 1'b0;	// uart.INT.UARTTXF.WIRE
	assign	uartrx_int = 1'b0;	// uart.INT.UARTRX.WIRE
	// }}}
	// }}}
`endif	// BUSCONSOLE_ACCESS

`ifdef	FLASHSCOPE_SCOPC
	// {{{
	wbscopc #(
		// {{{
		.LGMEM(13),
		.SYNCHRONOUS(1),
		.DEFAULT_HOLDOFF(4092)
		// }}}
	) flashdbgi(
		// {{{
		i_clk, 1'b1, flash_dbg_trigger, flash_debug[30:0],
		i_clk,
		wb32_flashdbg_cyc, wb32_flashdbg_stb, wb32_flashdbg_we,
			wb32_flashdbg_addr[1-1:0],
			wb32_flashdbg_data, // 32 bits wide
			wb32_flashdbg_sel,  // 32/8 bits wide
		wb32_flashdbg_stall, wb32_flashdbg_ack, wb32_flashdbg_idata,
		flashdbg_int
		// }}}
	);
	// }}}
`else	// FLASHSCOPE_SCOPC
	// {{{
	// Null bus slave
	// {{{

	//
	// In the case that there is no wb32_flashdbg peripheral
	// responding on the wb32 bus
	assign	wb32_flashdbg_ack   = 1'b0;
	assign	wb32_flashdbg_err   = (wb32_flashdbg_stb);
	assign	wb32_flashdbg_stall = 0;
	assign	wb32_flashdbg_idata = 0;

	// }}}
	// Null interrupt definitions
	// {{{
	assign	flashdbg_int = 1'b0;	// flashdbg.INT.FLASHDBG.WIRE
	// }}}
	// }}}
`endif	// FLASHSCOPE_SCOPC

`ifdef	SDIOSCOPE_SCOPC
	// {{{
	wbscopc #(
		// {{{
		.LGMEM(12),
		.SYNCHRONOUS(1),
		.DEFAULT_HOLDOFF(2044)
		// }}}
	) sdioscopei(
		// {{{
		i_clk, 1'b1, sdcard_debug[31], sdcard_debug[30:0],
		i_clk,
		wb32_sdioscope_cyc, wb32_sdioscope_stb, wb32_sdioscope_we,
			wb32_sdioscope_addr[1-1:0],
			wb32_sdioscope_data, // 32 bits wide
			wb32_sdioscope_sel,  // 32/8 bits wide
		wb32_sdioscope_stall, wb32_sdioscope_ack, wb32_sdioscope_idata,
		sdioscope_int
		// }}}
	);
	// }}}
`else	// SDIOSCOPE_SCOPC
	// {{{
	// Null bus slave
	// {{{

	//
	// In the case that there is no wb32_sdioscope peripheral
	// responding on the wb32 bus
	assign	wb32_sdioscope_ack   = 1'b0;
	assign	wb32_sdioscope_err   = (wb32_sdioscope_stb);
	assign	wb32_sdioscope_stall = 0;
	assign	wb32_sdioscope_idata = 0;

	// }}}
	// Null interrupt definitions
	// {{{
	assign	sdioscope_int = 1'b0;	// sdioscope.INT.SDIOSCOPE.WIRE
	// }}}
	// }}}
`endif	// SDIOSCOPE_SCOPC

	// }}}
endmodule // main.v
