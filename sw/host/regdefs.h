////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./regdefs.h
// {{{
// Project:	10Gb Ethernet switch
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	autofpga -I .: -d -o . allclocks.txt global.txt wbdown.txt icape.txt version.txt gpio.txt spio.txt wbuconsole.txt zipmaster.txt bkram.txt sdio.txt emmc.txt netrouter.txt cpunet.txt emmcscope.txt netscope.txt mem_bkram_only.txt mem_flash_bkram.txt i2ccpu.txt fan.txt sirefclk.txt i2cscope.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
// }}}
// Copyright (C) 2023, Gisselquist Technology, LLC
// {{{
// This file is part of the ETH10G project.
//
// The ETH10G project contains free software and gateware, licensed under the
// Apache License, Version 2.0 (the "License").  You may not use this project,
// or this file, except in compliance with the License.  You may obtain a copy
// of the License at
// }}}
//	http://www.apache.org/licenses/LICENSE-2.0
// {{{
// Unless required by applicable law or agreed to in writing, files
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
// License for the specific language governing permissions and limitations
// under the License.
//
////////////////////////////////////////////////////////////////////////////////
//
// }}}
#ifndef	REGDEFS_H
#define	REGDEFS_H


//
// The @REGDEFS.H.INCLUDE tag
//
// @REGDEFS.H.INCLUDE for masters
// @REGDEFS.H.INCLUDE for peripherals
// And finally any master REGDEFS.H.INCLUDE tags
// End of definitions from REGDEFS.H.INCLUDE


//
// Register address definitions, from @REGS.#d
//
// emmcscope compressed scope
#define	R_EMMCSCOPE     	0x00040000	// 00040000, wbregs names: EMMCSCOPE
#define	R_EMMCSCOPED    	0x00040004	// 00040000, wbregs names: EMMCSCOPED
// i2cscope compressed scope
#define	R_I2CSCOPE      	0x00040010	// 00040010, wbregs names: I2CSCOPE
#define	R_I2CSCOPED     	0x00040014	// 00040010, wbregs names: I2CSCOPED
// netscope compressed scope
#define	R_NETSCOPE      	0x00040020	// 00040020, wbregs names: NETSCOPE
#define	R_NETSCOPED     	0x00040024	// 00040020, wbregs names: NETSCOPED
// I2C Controller registers
#define	R_I2CCPU        	0x00040030	// 00040030, wbregs names: I2CCPU, I2CCPU_CTRL, I2CCPUCTRL
#define	R_I2CCPU_OVW    	0x00040034	// 00040030, wbregs names: I2CCPU_OVW, I2CCPU_OVERRIDE
#define	R_I2CCPU_ADDR   	0x00040038	// 00040030, wbregs names: I2CCPU_ADDR, I2CCPU_ADDRESS
#define	R_I2CCPU_CKCOUNT	0x0004003c	// 00040030, wbregs names: I2CCPUCLK, I2CCPU_CKCOUNT
#define	R_I2CDMA        	0x00040040	// 00040040, wbregs names: I2CDMA
#define	R_I2CDMA_ADDR   	0x00040044	// 00040040, wbregs names: I2CDMAADDR
#define	R_I2CDMA_BASE   	0x00040048	// 00040040, wbregs names: I2CDMABASE
#define	R_I2CDMA_LEN    	0x0004004c	// 00040040, wbregs names: I2CDMALEN
// CONSOLE registers
#define	R_CONSOLE_FIFO  	0x00040054	// 00040050, wbregs names: UFIFO
#define	R_CONSOLE_UARTRX	0x00040058	// 00040050, wbregs names: RX
#define	R_CONSOLE_UARTTX	0x0004005c	// 00040050, wbregs names: TX
// CPU Net Controller registers
#define	R_CPUNETRX_BASE 	0x00040060	// 00040060, wbregs names: CPUNETRXBASE
#define	R_CPUNETRX_LEN  	0x00040064	// 00040060, wbregs names: CPUNETRXLEN
#define	R_CPUNETRX_RPTR 	0x00040068	// 00040060, wbregs names: CPUNETRXRPTR
#define	R_CPUNETRX_WPTR 	0x0004006c	// 00040060, wbregs names: CPUNETRXWPTR
// eMMC Card addresses
#define	R_EMMC_CTRL     	0x00040080	// 00040080, wbregs names: EMMCCARD
#define	R_EMMC_DATA     	0x00040084	// 00040080, wbregs names: EMMCDATA
#define	R_EMMC_FIFOA    	0x00040088	// 00040080, wbregs names: EMMCFIFOA, EMMCFIF0, EMMCFIFA
#define	R_EMMC_FIFOB    	0x0004008c	// 00040080, wbregs names: EMMCFIFOB, EMMCFIF1, EMMCFIFB
#define	R_EMMC_PHY      	0x00040090	// 00040080, wbregs names: EMMCPHY
#define	R_FAN_FPGAPWM   	0x000400a0	// 000400a0, wbregs names: FAN_FPGAPWM
#define	R_FAN_SYSPWM    	0x000400a4	// 000400a0, wbregs names: FAN_SYSPWM
#define	R_FAN_TACH      	0x000400a8	// 000400a0, wbregs names: FAN_TACH
#define	R_FAN_TEMP      	0x000400ac	// 000400a0, wbregs names: FAN_TEMP
#define	R_FAN           	0x000400b0	// 000400a0, wbregs names: FAN_CTRL
#define	R_FAN_OVW       	0x000400b4	// 000400a0, wbregs names: FAN_OVW, FAN_OVERRIDE
#define	R_FAN_ADDR      	0x000400b8	// 000400a0, wbregs names: FAN_ADDR, FAN_ADDRESS
#define	R_FAN_CKCOUNT   	0x000400bc	// 000400a0, wbregs names: FANCLK, FAN_CKCOUNT
// SDIO SD Card addresses
#define	R_SDIO_CTRL     	0x000400c0	// 000400c0, wbregs names: SDCARD
#define	R_SDIO_DATA     	0x000400c4	// 000400c0, wbregs names: SDDATA
#define	R_SDIO_FIFOA    	0x000400c8	// 000400c0, wbregs names: SDFIFOA, SDFIF0, SDFIFA
#define	R_SDIO_FIFOB    	0x000400cc	// 000400c0, wbregs names: SDFIFOB, SDFIF1, SDFIFB
#define	R_SDIO_PHY      	0x000400d0	// 000400c0, wbregs names: SDPHY
#define	R_BUILDTIME     	0x000400e0	// 000400e0, wbregs names: BUILDTIME
#define	R_GPIO          	0x000400e4	// 000400e4, wbregs names: GPIO, GPI, GPO
#define	R_NETDBG        	0x000400e8	// 000400e8, wbregs names: NETDBG
#define	R_NETLOCK       	0x000400ec	// 000400ec, wbregs names: NETLOCK
#define	R_SIREFCLK      	0x000400f0	// 000400f0, wbregs names: SIREFCLK
#define	R_SPIO          	0x000400f4	// 000400f4, wbregs names: SPIO
#define	R_VERSION       	0x000400f8	// 000400f8, wbregs names: VERSION
// FPGA CONFIG REGISTERS: 0x4e0-0x4ff
#define	R_CFG_CRC       	0x00040180	// 00040180, wbregs names: FPGACRC
#define	R_CFG_FAR       	0x00040184	// 00040180, wbregs names: FPGAFAR
#define	R_CFG_FDRI      	0x00040188	// 00040180, wbregs names: FPGAFDRI
#define	R_CFG_FDRO      	0x0004018c	// 00040180, wbregs names: FPGAFDRO
#define	R_CFG_CMD       	0x00040190	// 00040180, wbregs names: FPGACMD
#define	R_CFG_CTL0      	0x00040194	// 00040180, wbregs names: FPGACTL0
#define	R_CFG_MASK      	0x00040198	// 00040180, wbregs names: FPGAMASK
#define	R_CFG_STAT      	0x0004019c	// 00040180, wbregs names: FPGASTAT
#define	R_CFG_LOUT      	0x000401a0	// 00040180, wbregs names: FPGALOUT
#define	R_CFG_COR0      	0x000401a4	// 00040180, wbregs names: FPGACOR0
#define	R_CFG_MFWR      	0x000401a8	// 00040180, wbregs names: FPGAMFWR
#define	R_CFG_CBC       	0x000401ac	// 00040180, wbregs names: FPGACBC
#define	R_CFG_IDCODE    	0x000401b0	// 00040180, wbregs names: FPGAIDCODE
#define	R_CFG_AXSS      	0x000401b4	// 00040180, wbregs names: FPGAAXSS
#define	R_CFG_COR1      	0x000401b8	// 00040180, wbregs names: FPGACOR1
#define	R_CFG_WBSTAR    	0x000401c0	// 00040180, wbregs names: WBSTAR
#define	R_CFG_TIMER     	0x000401c4	// 00040180, wbregs names: CFGTIMER
#define	R_CFG_BOOTSTS   	0x000401d8	// 00040180, wbregs names: BOOTSTS
#define	R_CFG_CTL1      	0x000401e0	// 00040180, wbregs names: FPGACTL1
#define	R_CFG_BSPI      	0x000401fc	// 00040180, wbregs names: FPGABSPI
#define	R_BKRAM         	0x00080000	// 00080000, wbregs names: RAM
// ZipCPU control/debug registers
#define	R_ZIPCTRL       	0x00100000	// 00100000, wbregs names: CPU, ZIPCTRL
#define	R_ZIPREGS       	0x00100080	// 00100000, wbregs names: ZIPREGS
#define	R_ZIPS0         	0x00100080	// 00100000, wbregs names: SR0
#define	R_ZIPS1         	0x00100084	// 00100000, wbregs names: SR1
#define	R_ZIPS2         	0x00100088	// 00100000, wbregs names: SR2
#define	R_ZIPS3         	0x0010008c	// 00100000, wbregs names: SR3
#define	R_ZIPS4         	0x00100090	// 00100000, wbregs names: SR4
#define	R_ZIPS5         	0x00100094	// 00100000, wbregs names: SR5
#define	R_ZIPS6         	0x00100098	// 00100000, wbregs names: SR6
#define	R_ZIPS7         	0x0010009c	// 00100000, wbregs names: SR7
#define	R_ZIPS8         	0x001000a0	// 00100000, wbregs names: SR8
#define	R_ZIPS9         	0x001000a4	// 00100000, wbregs names: SR9
#define	R_ZIPS10        	0x001000a8	// 00100000, wbregs names: SR10
#define	R_ZIPS11        	0x001000ac	// 00100000, wbregs names: SR11
#define	R_ZIPS12        	0x001000b0	// 00100000, wbregs names: SR12
#define	R_ZIPSSP        	0x001000b4	// 00100000, wbregs names: SSP, SR13
#define	R_ZIPCC         	0x001000b8	// 00100000, wbregs names: ZIPCC, CC, SCC, SR14
#define	R_ZIPPC         	0x001000bc	// 00100000, wbregs names: ZIPPC, PC, SPC, SR15
#define	R_ZIPUSER       	0x001000c0	// 00100000, wbregs names: ZIPUSER
#define	R_ZIPU0         	0x001000c0	// 00100000, wbregs names: UR0
#define	R_ZIPU1         	0x001000c4	// 00100000, wbregs names: UR1
#define	R_ZIPU2         	0x001000c8	// 00100000, wbregs names: UR2
#define	R_ZIPU3         	0x001000cc	// 00100000, wbregs names: UR3
#define	R_ZIPU4         	0x001000d0	// 00100000, wbregs names: UR4
#define	R_ZIPU5         	0x001000d4	// 00100000, wbregs names: UR5
#define	R_ZIPU6         	0x001000d8	// 00100000, wbregs names: UR6
#define	R_ZIPU7         	0x001000dc	// 00100000, wbregs names: UR7
#define	R_ZIPU8         	0x001000e0	// 00100000, wbregs names: UR8
#define	R_ZIPU9         	0x001000e4	// 00100000, wbregs names: UR9
#define	R_ZIPU10        	0x001000e8	// 00100000, wbregs names: SR10
#define	R_ZIPU11        	0x001000ec	// 00100000, wbregs names: SR11
#define	R_ZIPU12        	0x001000f0	// 00100000, wbregs names: SR12
#define	R_ZIPUSP        	0x001000f4	// 00100000, wbregs names: USP, UR13
#define	R_ZIPUCC        	0x001000f8	// 00100000, wbregs names: ZIPUCC, UCC
#define	R_ZIPUPC        	0x001000fc	// 00100000, wbregs names: ZIPUPC, UPC
#define	R_ZIPSYSTEM     	0x00100100	// 00100000, wbregs names: ZIPSYSTEM, ZIPSYS
#define	R_ZIPPIC        	0x00100100	// 00100000, wbregs names: ZIPPIC
#define	R_ZIPWDOG       	0x00100104	// 00100000, wbregs names: ZIPWDOG
#define	R_ZIPBDOG       	0x00100108	// 00100000, wbregs names: ZIPBDOG
#define	R_ZIPAPIC       	0x0010010c	// 00100000, wbregs names: ZIPAPIC
#define	R_ZIPTIMA       	0x00100110	// 00100000, wbregs names: ZIPTIMA
#define	R_ZIPTIMB       	0x00100114	// 00100000, wbregs names: ZIPTIMB
#define	R_ZIPTIMC       	0x00100118	// 00100000, wbregs names: ZIPTIMC
#define	R_ZIPJIFF       	0x0010011c	// 00100000, wbregs names: ZIPJIFF
#define	R_ZIPMTASK      	0x00100120	// 00100000, wbregs names: ZIPMTASK
#define	R_ZIPMMSTL      	0x00100124	// 00100000, wbregs names: ZIPMMSTL
#define	R_ZIPMPSTL      	0x00100128	// 00100000, wbregs names: ZIPMPSTL
#define	R_ZIPMINSN      	0x0010012c	// 00100000, wbregs names: ZIPMINSN
#define	R_ZIPUTASK      	0x00100130	// 00100000, wbregs names: ZIPUTASK
#define	R_ZIPUMSTL      	0x00100134	// 00100000, wbregs names: ZIPUMSTL
#define	R_ZIPUPSTL      	0x00100138	// 00100000, wbregs names: ZIPUPSTL
#define	R_ZIPUINSN      	0x0010013c	// 00100000, wbregs names: ZIPUINSN
#define	R_ZIPDMAC       	0x00100140	// 00100000, wbregs names: ZIPDMAC


//
// The @REGDEFS.H.DEFNS tag
//
// @REGDEFS.H.DEFNS for masters
#define	BAUDRATE	1000000
// @REGDEFS.H.DEFNS for peripherals
#define	BKRAMBASE	0x00080000
#define	BKRAMLEN	0x00080000
// @REGDEFS.H.DEFNS at the top level
// End of definitions from REGDEFS.H.DEFNS
//
// The @REGDEFS.H.INSERT tag
//
// @REGDEFS.H.INSERT for masters
// @REGDEFS.H.INSERT for peripherals
////////////////////////////////////////////////////////////////////////////////
//
// ZipCPU register definitions
// {{{

#define	CPU_GO		0x0000
#define	CPU_HALT	0x0001
#define	CPU_STALL	0x0002
#define	CPU_STEP	0x0004
#define	CPU_RESET	0x0008
#define	CPU_CLRCACHE	0x0010
// (Reserved)		0x00e0
#define	CPU_SLEEPING	0x0100
#define	CPU_GIE		0x0200
#define	CPU_INT		0x0400
#define	CPU_BREAK	0x0800
#define	CPU_EXINT	0xfffff000
//
#define	CPU_sR0		0x0020
#define	CPU_sSP		0x002d
#define	CPU_sCC		0x002e
#define	CPU_sPC		0x002f
#define	CPU_uR0		0x0030
#define	CPU_uSP		0x003d
#define	CPU_uCC		0x003e
#define	CPU_uPC		0x003f

#ifdef	BKROM_ACCESS
#define	RESET_ADDRESS	@$[0x%08x](bkrom.REGBASE)
#else
#ifdef	FLASH_ACCESS
#define	RESET_ADDRESS	@$[0x%08x](RESET_ADDRESS)
#else
#define	RESET_ADDRESS	0x00080000
#endif	// FLASH_ACCESS
#endif	// BKROM_ACCESS
// }}}
// @REGDEFS.H.INSERT from the top level
typedef	struct {
	unsigned	m_addr;
	const char	*m_name;
} REGNAME;

extern	const	REGNAME	*bregs;
extern	const	int	NREGS;
// #define	NREGS	(sizeof(bregs)/sizeof(bregs[0]))

extern	unsigned	addrdecode(const char *v);
extern	const	char *addrname(const unsigned v);
// End of definitions from REGDEFS.H.INSERT


#endif	// REGDEFS_H
